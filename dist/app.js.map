{"version":3,"sources":["webpack://RJsonParser/webpack/universalModuleDefinition","webpack://RJsonParser/./src/app.js","webpack://RJsonParser/./src/io/CharStream.js","webpack://RJsonParser/./src/io/IOString.js","webpack://RJsonParser/./src/io/Reader.js","webpack://RJsonParser/./src/io/StringReader.js","webpack://RJsonParser/./src/json/JsonBoolean.js","webpack://RJsonParser/./src/json/JsonList.js","webpack://RJsonParser/./src/json/JsonMap.js","webpack://RJsonParser/./src/json/JsonNull.js","webpack://RJsonParser/./src/json/JsonNumber.js","webpack://RJsonParser/./src/json/JsonObject.js","webpack://RJsonParser/./src/json/JsonString.js","webpack://RJsonParser/./src/logger/logger.js","webpack://RJsonParser/./src/parser/RJsonAbsParser.js","webpack://RJsonParser/./src/parser/RJsonConstants.js","webpack://RJsonParser/./src/parser/RJsonLexer.js","webpack://RJsonParser/./src/parser/RJsonParser.js","webpack://RJsonParser/./src/parser/RJsonParserError.js","webpack://RJsonParser/./src/parser/RJsonToken.js","webpack://RJsonParser/./src/parser/RJsonTokenMgrError.js"],"names":["root","factory","exports","module","define","amd","this","editor","example","init","document","getElementById","classList","toggle","jsonObj","getValue","parse","appendable","destination","formatJsonToString","setValue","formatInputString","formatJsonToHtml","innerHTML","formatHtml","addEventListener","toUnformattedString","compress","e","console","log","stack","editorEl","CodeMirror","fromTextArea","lineNumbers","lineWrapping","mode","matchBrackets","setSize","JSON","stringify","format","logger","CharStream","stream","maxNextCharInd","nextCharInd","bufline","bufcolumn","column","line","bufpos","bufsize","available","maxBufSize","inBuf","prevCharIsCR","prevCharIsLF","tabSize","tokenBegin","nextCharBuf","Array","buffer","inputStream","readFromBuffer","readChar","c","adjustBuffSize","readByte","checkSpecial","updateLineColumn","fillBuff","debug","charCodeAt","i","read","close","Error","backup","olumn","amount","expandBuff","response","toString","IOString","chars","offset","count","j","value","ccode","code","join","Reader","newInput","constructor","TypeError","prototype","getChars","input","length","next","mark","cbuf","len","srcBegin","srcEnd","dst","dstBegin","StringReader","super","ensureOpen","n","Math","min","JsonBoolean","isKey","currentLevel","_input","JsonList","jsonObject","push","size","forEach","element","cAppendable","tabs","_root","JsonMap","jsonObjectKey","jsonObjectValue","set","info","key","keyAppendable","valueAppendable","keyValue","JsonNumber","JsonObject","_isKey","_keyValue","_rawInput","newRoot","newKey","raw","newValue","JsonString","removeSpecialChars","tmp","r","concat","msg","RJsonAbsParser","rinput","startNow","undefined","reader","lexer","token","jj_nt","getNextToken","jj_gen","jj_la1","jj_la1_0","jj_kind","nativeNumbers","o","kind","STRING_SINGLE_EMPTY","STRING_DOUBLE_EMPTY","STRING_SINGLE_NONEMPTY","STRING_DOUBLE_NONEMPTY","string","SYMBOL","symbol","NULL","nullValue","NUMBER_INTEGER","NUMBER_DECIMAL","TRUE","FALSE","booleanValue","number","jj_consume_token","BRACE_CLOSE","s","doubleQuoteString","singleQuoteString","image","sjj_gen","b","x","t","RJsonConstants","EOF","C_SINGLE_COMMENT","C_MULTILINE_COMMENT","SH_SINGLE_COMMENT","WHITESPACE","EOL","COMMA","BRACE_OPEN","COLON","BRACKET_OPEN","BRACKET_CLOSE","ZERO","DIGIT_NONZERO","DIGIT","QUOTE_DOUBLE","QUOTE_SINGLE","STRING_SINGLE_BODY","STRING_DOUBLE_BODY","DEFAULT","LEXICAL_ERROR","tokenImage","RJsonLexer","istream","input_stream","curChar","matchedKind","matchedPos","toToken","curLexState","strLiteralImages","matchedToken","curPos","EOFLoop","beginToken","fillToken","analyzeCurrentCharacter","error_line","getEndLine","error_column","getEndColumn","error_after","EOFSeen","e1","getImage","consume_char","stopAtPos","moveChar01","moveChar","findNumber","startState","isDigit","active0","target","moveChar02","findStringLiteral","old0","moveChar03","moveChar04","pos","checkForSpace","beginLine","getBeginLine","beginColumn","getBeginColumn","endLine","endColumn","im","spaceDetected","RJsonParser","toReturn","anything","rawInput","ensureEOF","object","list","map","Map","objectKey","put","label_1","add","label_2","oldToken","generateParseException","k","l","jj_expentries","la1tokens","jj_expentry","exptokseq","getMessage","runParser","RJsonParserError","_currentTokenVal","_expectedTokenSequencesVal","_tokenImageVal","name","currentToken","expectedTokenSequences","eol","maxSize","expected","retval","tok","add_escapes","message","str","ch","charAt","substring","RJsonToken","ofkind","nimage","_kind","_image","_next","specialToken","newNext","_beginLine","_endLine","_beginColumn","_endColumn","newKind","RJsonTokenMgrError","lexState","errorLine","errorColumn","errorAfter","addEscapes","reason","LexicalError"],"mappings":"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","file":"app.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RJsonParser\"] = factory();\n\telse\n\t\troot[\"RJsonParser\"] = factory();\n})(this, function() {\nreturn ","import RJsonParser from \"./parser/RJsonParser\"\r\n\r\nimport css from \"./css/style.css\";\r\n\r\nvar example = { \"store\": { \"book\": [{ \"category\": \"reference\", \"author\": \"Nigel Rees\", \"title\": \"Sayings of the Century\", \"price\": 8.95 }, { \"category\": \"fiction\", \"author\": \"Evelyn Waugh\", \"title\": \"Sword of Honour\", \"price\": 12.99 }, { \"category\": \"fiction\", \"author\": \"J. R. R. Tolkien\", \"title\": \"The Lord of the Rings\", \"isbn\": \"0-395-19395-8\", \"price\": 22.99 }], \"bicycle\": { \"color\": \"red\", \"price\": 19.95 } } };\r\n\r\nformat();\r\nvar editor;\r\n\r\nfunction formatInputString(jsonObj) {\r\n    var appendable = {\r\n        destination: \"\"\r\n    }\r\n    jsonObj.formatJsonToString(appendable, -1);\r\n    //console.log(appendable.destination);\r\n    editor.setValue(appendable.destination);\r\n    //document.getElementById('inputtextarea').value = appendable.destination;\r\n}\r\n\r\nfunction formatHtml(jsonObj) {\r\n    var appendable = {\r\n        destination: \"\"\r\n    }\r\n    jsonObj.formatJsonToHtml(appendable, -1);\r\n    //console.log(appendable.destination);\r\n    document.getElementById('json').innerHTML = appendable.destination;\r\n}\r\n\r\nfunction initCm() {\r\n    var editorEl = document.getElementById(\"inputtextarea\");\r\n    editor = CodeMirror.fromTextArea(editorEl, {\r\n        lineNumbers: true,\r\n        lineWrapping: true,\r\n        mode: \"text/typescript\",\r\n        matchBrackets: true\r\n    });\r\n   \r\n    editor.setValue('loading...');\r\n    editor.setSize(600, 500);\r\n   \r\n}\r\n\r\nfunction compress(jsonObj) {\r\n    var appendable = {\r\n        destination: \"\"\r\n    }\r\n    jsonObj.toUnformattedString(appendable, -1);\r\n    //console.log(appendable.destination);\r\n    document.getElementById('json').innerHTML = appendable.destination;\r\n}\r\n\r\nfunction init() {\r\n    try {\r\n        //console.log('reformatting.');\r\n        document.getElementById(\"input-spinner\").classList.toggle(\"hidden\");\r\n        document.getElementById(\"error-display\").classList.toggle(\"hidden\");\r\n\r\n        //var target = document.getElementById('inputtextarea');\r\n        //console.log('parsing ' + editor.getValue());\r\n        let instance = new RJsonParser(editor.getValue());\r\n        //target.value = 'loading';\r\n        //console.log('parsing json...');\r\n        var jsonObj = instance.parse();\r\n        //console.log('parsing json done...');\r\n        formatInputString(jsonObj);\r\n        formatHtml(jsonObj);\r\n        document.getElementById(\"input-spinner\").classList.toggle(\"hidden\");\r\n        //console.log('adding eventlistener to compressjson');\r\n        document.getElementById('compressjson').addEventListener('click', () => {\r\n            compress(jsonObj);\r\n        });\r\n    } catch (e) {\r\n        //console.log('exception');\r\n        console.log(e.stack);\r\n        document.getElementById(\"error-display\").classList.toggle(\"hidden\");\r\n        document.getElementById('error-display').innerHTML = 'error loading json...';\r\n        document.getElementById(\"input-spinner\").classList.toggle(\"hidden\");\r\n    }\r\n}\r\n\r\n// function onTextEditorChange(cm, evt) {\r\n//     console.log('onTextEditorChange(cm, evt)');\r\n//     init();\r\n// }\r\n\r\nfunction format() {\r\n    try {\r\n        //var target = document.getElementById('inputtextarea');\r\n        //target.value = JSON.stringify(example);\r\n        initCm();\r\n        editor.setValue(JSON.stringify(example));\r\n        init();\r\n        // editor.on(\"change\", (cm, evt) => {\r\n        //     console.log('editor changed ...');\r\n        //     onTextEditorChange(cm, evt)\r\n        // });\r\n        document.getElementById('loadjson').addEventListener('click', () => {\r\n            //console.log('load json...' + document.getElementById('inputtextarea').value);\r\n            //alert('-----------' + document.getElementById('inputtextarea').innerHTML);\r\n            init();\r\n        })\r\n        \r\n    } catch (e) {\r\n        console.log(e.stack);\r\n        //document.getElementById('inputtextarea').innerHTML = e.message;\r\n    }\r\n}\r\n\r\n\r\n","import IOString from './IOString.js';\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class CharStream {\r\n    maxBufSize = 4096;\r\n\r\n    constructor(stream) {\r\n        this.maxNextCharInd = 0;\r\n        this.nextCharInd = -1;\r\n\r\n        this.bufline = [];\r\n        this.bufcolumn = [];\r\n        this.column = 0;\r\n        this.line = 1;\r\n\r\n        this.bufpos = -1;\r\n        this.bufsize = 0;\r\n        this.available = this.maxBufSize;\r\n        this.inBuf = 0;\r\n\r\n        this.prevCharIsCR = false;\r\n        this.prevCharIsLF = false;\r\n        this.tabSize = 4;\r\n\r\n        this.tokenBegin = 0;\r\n        this.nextCharBuf = new Array(this.maxBufSize);\r\n        this.buffer = [];\r\n        this.inputStream = stream;\r\n    }\r\n\r\n    beginToken() {\r\n        if (this.inBuf > 0) {\r\n            // lookahead and backup has happened.\r\n            return this.readFromBuffer();\r\n        }\r\n        this.tokenBegin = 0;\r\n        this.bufpos = -1;\r\n        return this.readChar();\r\n    }\r\n\r\n    readChar() {\r\n        if (this.inBuf > 0) {\r\n            // lookahead and backup has happened.\r\n            return this.readFromBuffer();\r\n        }\r\n        if (++this.bufpos === this.available)\r\n            this.adjustBuffSize();\r\n\r\n        let c;\r\n        if ((this.buffer[this.bufpos] = c = this.readByte()) == '\\\\') {\r\n            return this.checkSpecial(c);\r\n        } else {\r\n            this.updateLineColumn(c);\r\n            return c;\r\n        }\r\n    }\r\n\r\n    readByte() {\r\n\r\n        if (++this.nextCharInd >= this.maxNextCharInd)\r\n            this.fillBuff();\r\n        logger.debug(\"nextCharInd=\" + (this.nextCharInd) + \",this.maxNextCharInd=\" + this.maxNextCharInd + \",code=\" + this.nextCharBuf[this.nextCharInd].charCodeAt());\r\n        return this.nextCharBuf[this.nextCharInd];\r\n    }\r\n\r\n    fillBuff() {\r\n        let i;\r\n        if (this.maxNextCharInd === this.maxBufSize)\r\n            this.maxNextCharInd = this.nextCharInd = 0;\r\n        try {\r\n            if ((i = this.inputStream.read(this.nextCharBuf, this.maxNextCharInd, this.maxBufSize - this.maxNextCharInd)) === -1) {\r\n                this.inputStream.close();\r\n                throw new Error(\"stream has not enough data.\");\r\n            } else {\r\n                this.maxNextCharInd += i;\r\n            }\r\n        } catch (e) {\r\n            if (this.bufpos != 0) {\r\n                --this.bufpos;\r\n                this.backup(0);\r\n            } else {\r\n                this.bufline[this.bufpos] = this.line;\r\n                this.bufcolumn[this.bufpos] = this.olumn;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    backup(amount) {\r\n        //logger.debug('inBuf-' + this.inBuf + \",bufPos-\" + this.bufpos);\r\n        this.inBuf += amount;\r\n        if ((this.bufpos -= amount) < 0)\r\n            this.bufpos += this.bufsize;\r\n        //this.tokenBegin = amount;\r\n        //logger.debug('inBuf-' + this.inBuf + \",bufPos-\" + this.bufpos);\r\n    }\r\n\r\n    readFromBuffer() {\r\n        //logger.debug('reading from inBuf-' + this.inBuf);\r\n        --this.inBuf;\r\n        if (++this.bufpos == this.bufsize)\r\n            this.bufpos = 0;\r\n        return this.buffer[this.bufpos];\r\n    }\r\n\r\n    adjustBuffSize() {\r\n        if (this.available === this.bufsize) {\r\n            if (this.tokenBegin > 2048) {\r\n                this.bufpos = 0;\r\n            } else {\r\n                this.expandBuff(true);\r\n            }\r\n        } else if (this.available > this.tokenBegin) {\r\n            this.available = this.bufsize;\r\n        } else if ((this.tokenBegin - this.available) < 2048) {\r\n            this.expandBuff(true);\r\n        } else {\r\n            this.available = this.tokenBegin;\r\n        }\r\n    }\r\n\r\n    expandBuff() {\r\n        throw new Error(\"Implementation to be done....\");\r\n    }\r\n\r\n    checkSpecial(c) {\r\n        //throw new Error(\"Implementation to be done....\");\r\n        return c;\r\n    }\r\n\r\n    updateLineColumn(c) {\r\n        this.column++;\r\n        if (this.prevCharIsLF) {\r\n            this.prevCharIsLF = false;\r\n            this.line += (this.column = 1);\r\n        } else if (this.prevCharIsCR) {\r\n            this.prevCharIsCR = false;\r\n            if (c == '\\n') {\r\n                this.prevCharIsLF = true;\r\n            } else {\r\n                this.line += (this.column = 1);\r\n            }\r\n        }\r\n\r\n        switch (c) {\r\n            case '\\r':\r\n                //this.tokenBegin++;\r\n                this.prevCharIsCR = true;\r\n                break;\r\n            case '\\n':\r\n                //this.tokenBegin++;\r\n                this.prevCharIsLF = true;\r\n                break;\r\n            case '\\t':\r\n                //this.tokenBegin++;\r\n                this.column--;\r\n                this.column += (this.tabSize - (this.column % this.tabSize));\r\n                break;\r\n            case 32:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.bufline[this.bufpos] = this.line;\r\n        this.bufcolumn[this.bufpos] = this.column;\r\n    }\r\n\r\n    spaceDetected() {\r\n        this.tokenBegin++;\r\n    }\r\n\r\n    getImage() {\r\n        var response;\r\n        logger.debug(\"bufpos=\" + this.bufpos + \",tokenBegin=\" + this.tokenBegin);\r\n        //logger.debug(\"buffer=\" + this.buffer[0].charCodeAt() + \",\" + this.buffer[1].charCodeAt() );\r\n        //logger.debug(\"buffer=\" + this.buffer[2].charCodeAt() + \",\" + this.buffer[3].charCodeAt() );\r\n        //logger.debug(\"buffer=\" + this.buffer[4].charCodeAt() + \",\" + this.buffer[5].charCodeAt() );\r\n        //logger.debug(\"buffer=\" + this.buffer[6].charCodeAt() + \",\" + this.buffer[7].charCodeAt() );\r\n        if (this.bufpos >= this.tokenBegin) {\r\n            response = new IOString(this.buffer, this.tokenBegin, this.bufpos - this.tokenBegin + 1);\r\n            logger.debug(\"response=\" + response.toString());\r\n        } else {\r\n            response = new IOString(this.buffer, this.tokenBegin, this.bufsize - this.tokenBegin).toString() + new IOString(this.buffer, 0, this.bufpos + 1).toString();\r\n            logger.debug(\"response=\" + response.toString());\r\n        }\r\n        return response.stringify();\r\n    }\r\n\r\n    get getColumn() {\r\n        return this.bufcolumn[this.bufpos];\r\n    }\r\n\r\n    get getLine() {\r\n        return this.bufline[this.bufpos];\r\n    }\r\n\r\n    get getEndLine() {\r\n        return this.bufline[this.bufpos];\r\n    }\r\n\r\n    get getBeginColumn() {\r\n        return this.bufcolumn[this.tokenBegin];\r\n    }\r\n\r\n    get getBeginLine() {\r\n        return this.bufline[this.tokenBegin];\r\n    }\r\n}","var logger = require('../logger/logger');\r\n\r\nexport default class IOString {\r\n\r\n    constructor(chars, offset, count) {\r\n        if (offset < 0)\r\n            throw new Error('Offset cannot be negative');\r\n        if (count < 0)\r\n            throw new Error('count cannot be negative');\r\n\r\n        let i;\r\n        let j= offset;\r\n        this.value = [];\r\n        var ccode = chars[j].charCodeAt();\r\n        // fix for removing white space in the begining of the string.\r\n        while(ccode === 32) {\r\n            j++;\r\n            ccode = chars[j].charCodeAt();\r\n        }\r\n        \r\n        for (i = j; i < (offset + count); i++) {\r\n            var code = chars[i].charCodeAt();\r\n            logger.debug('code at i=' + i +\",code=\" + code);\r\n            //this.value.push(chars[i]);\r\n            if (code != 34) // '\\\"'\r\n                this.value[i] = chars[i];\r\n\r\n        }\r\n    }\r\n\r\n\r\n    toString() {\r\n        return this.value.join(\"\");\r\n    }\r\n\r\n    stringify() {\r\n        return this.value.join(\"\");\r\n    }\r\n}\r\n","export default class Reader {\r\n\r\n    constructor(newInput) {\r\n        if (this.constructor === Reader) {\r\n            throw new TypeError(\"Can not construct abstract class.\");\r\n        }\r\n\r\n        if (this.read === Reader.prototype.read) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract method read.\");\r\n        }\r\n\r\n        if (this.getChars === Reader.prototype.getChars) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract method getChars.\");\r\n        }\r\n\r\n        if (this.close === Reader.prototype.close) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract close getChars.\");\r\n        }\r\n        \r\n        this.input = newInput;\r\n        this.length = this.input.length;\r\n        this.next = 0;\r\n        this.mark = 0;\r\n    }\r\n\r\n    read(cbuf, offset, len) {\r\n        throw new TypeError(\"Do not call abstract method read from child.\");\r\n    }\r\n\r\n    getChars(srcBegin, srcEnd, dst, dstBegin) {\r\n        throw new TypeError(\"Do not call abstract method getChars from child.\");\r\n    }\r\n\r\n    close() {\r\n        throw new TypeError(\"Do not call abstract method close from child.\");\r\n    }\r\n\r\n    ensureOpen() {\r\n        if (this.input === null)\r\n            throw new Error('Stream closed');\r\n    }\r\n}","import Reader from './Reader.js';\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class StringReader extends Reader {\r\n\r\n    constructor(newInput) {\r\n        super(newInput);\r\n    }\r\n    /*\r\n     * Reads characters into a portion of an array. This method will block until some input is \r\n     * available, an I/O error occurs, or the end of the stream is reached.\r\n     * \r\n     * return The number of characters read, or -1 if the end of the stream has been reached\r\n     */\r\n    read(cbuf, offset, len) {\r\n        this.ensureOpen();\r\n        if ((offset < 0) || (offset > cbuf.length) || (len < 0) ||\r\n            ((offset + len) > cbuf.length) || ((offset + len) < 0)) {\r\n            throw new Error('index out of bounds.');\r\n        } else if (len == 0) {\r\n            return 0;\r\n        }\r\n        if (this.next >= this.length)\r\n            return -1;\r\n        var n = Math.min(this.length - this.next, len);\r\n        this.getChars(this.next, this.next + n, cbuf, offset);\r\n        this.next += n;\r\n        return n;\r\n    }\r\n\r\n    getChars(srcBegin, srcEnd, dst, dstBegin) {\r\n        if (srcBegin < 0) {\r\n            new Error('index out of bounds - ' + srcBegin);\r\n        }\r\n        if (srcEnd > this.input.length) {\r\n            new Error('index out of bounds - ' + srcEnd);\r\n        }   \r\n        if (srcBegin > srcEnd) {\r\n            throw new Error('index out of bounds - ' + (srcEnd - srcBegin));\r\n        }\r\n        var i;\r\n        for(i = srcBegin; i <= srcEnd; i++) {\r\n            dst[dstBegin] = this.input[i];\r\n            dstBegin++;\r\n        }\r\n    }\r\n\r\n    close() {\r\n        this.input = null;\r\n    }\r\n}","\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonBoolean extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    toUnformattedString(appendable, currentLevel) {\r\n        if(this._input)\r\n            appendable.destination = true;\r\n        else \r\n            appendable.destination = false;\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        //console.log('destination->' + destination);\r\n        if(this._input)\r\n            appendable.destination = true;\r\n        else \r\n            appendable.destination = false;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        destination += \"<span class=\\\"type-boolean\\\">\";\r\n        destination += this._input + \"</span>\";\r\n        appendable.destination = destination;\r\n    }\r\n}","\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonList extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    add(jsonObject) {\r\n        this._input.push(jsonObject);\r\n        return this;\r\n    }\r\n    \r\n    toUnformattedString(appendable, currentLevel) {\r\n        ++currentLevel;\r\n        let j;\r\n        let destination = \"\";\r\n        destination += \"[\";\r\n        j = 0;\r\n        let size = this._input.length;\r\n        this._input.forEach(element => {\r\n            var cAppendable = {\r\n                destination: \"\"\r\n            }\r\n            element.formatJsonToString(cAppendable, currentLevel);\r\n            destination += cAppendable.destination;\r\n            if (j != (size - 1))\r\n                destination += \",\";\r\n            j++;\r\n        });\r\n        destination += \"]\";\r\n        appendable.destination += destination;\r\n    }\r\n    formatJsonToString(appendable, currentLevel) {\r\n        ++currentLevel;\r\n        let tabs = '';\r\n        let i, j;\r\n        for (i = 0; i < currentLevel; i++)\r\n            tabs += \"\\t\";\r\n        let destination = \"\";\r\n        destination += \"\\n\" + tabs + \"[\\n\";\r\n        j = 0;\r\n        let size = this._input.length;\r\n        this._input.forEach(element => {\r\n            var cAppendable = {\r\n                destination: \"\"\r\n            }\r\n            element.formatJsonToString(cAppendable, currentLevel);\r\n            destination += cAppendable.destination;\r\n            if (j != (size - 1))\r\n                destination += \",\\n\";\r\n            j++;\r\n        });\r\n        destination += \"\\n\" + tabs + \"]\";\r\n        appendable.destination += destination;\r\n        //console.log('destination->' + destination);\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        if (this._root) {\r\n            destination += \"<div class=\\\"json-viewer\\\"><code class=\\\"js\\\" id=\\\"js\\\">\";\r\n        }\r\n\r\n        let size = this._input.length;\r\n        destination += \"<a class=\\\"list-link\\\" href=\\\"javascript:void(0)\\\">[\";\r\n        destination += \"<span style=\\\"color: #1d57d4;\\\"><i onClick=\\\"spanClicked(event);\\\" class=\\\"far fa-minus-square\\\"></i></span>\";\r\n        destination += \"<span style=\\\"color: #1d57d4;\\\" class=\\\"hide\\\"><i onClick=\\\"spanClicked(event);\\\" class=\\\"fas fa-plus-square\\\"></i></span>\";\r\n        destination += \"<span class=\\\"hide\\\"><span onClick=\\\"spanClicked(event);\\\" class=\\\"items-ph\\\">\" + size + \" items</span></span>\";\r\n        destination += \"</a>\";\r\n        let j = 0;\r\n        destination += \"<ul data-level=\\\"\" + ++currentLevel + \"\\\" class=\\\"type-array\\\">\";\r\n        this._input.forEach(element => {\r\n\r\n            destination += \"<li>\";\r\n            var cAppendable = {\r\n                destination: 0\r\n            }\r\n            element.formatJsonToHtml(cAppendable, currentLevel);\r\n            destination += cAppendable.destination;\r\n            if (j != (size - 1))\r\n                destination += \"<span class=\\\"type-comma\\\">\" + \",\" + \"</span>\";\r\n            destination += \"</li>\";\r\n            j++;\r\n        });\r\n        destination += \"</ul>\";\r\n        destination += \"<span class=\\\"type-symbol\\\">]</span>\";\r\n        if (this._root) {\r\n            destination += \"</code></div>\";\r\n        }\r\n\r\n        appendable.destination = destination;\r\n    }\r\n}","var logger = require('../logger/logger');\r\n\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonMap extends JsonObject {\r\n    \r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    put(jsonObjectKey,jsonObjectValue) {\r\n        this._input.set(jsonObjectKey, jsonObjectValue);\r\n        logger.debug('map size ->' + this._input.size);\r\n        return this;\r\n    }\r\n\r\n    toUnformattedString(appendable, currentLevel) {\r\n        ++currentLevel;\r\n        let j;\r\n        let destination = \"\";\r\n        destination += \"{\";\r\n        j = 0;\r\n        let size = this._input.size;\r\n        logger.info('size of the map ' + this._input.size);\r\n\r\n        this._input.forEach(function(value, key) {\r\n            var keyAppendable = {\r\n                destination : \"\"\r\n            }\r\n            var valueAppendable = {\r\n                destination : \"\"\r\n            }\r\n         \r\n            key.formatJsonToString(keyAppendable,currentLevel);\r\n            destination += keyAppendable.destination;\r\n            destination += \" : \";\r\n            \r\n            value.keyValue = true;\r\n            value.formatJsonToString(valueAppendable,currentLevel);\r\n            destination += valueAppendable.destination;\r\n            if(j != (size-1))\r\n                destination += \",\";\r\n            j++;  \r\n        });\r\n        destination += \"}\";\r\n        appendable.destination += destination;\r\n    }\r\n    \r\n    formatJsonToString(appendable, currentLevel) {\r\n        ++currentLevel;\r\n        let tabs = '';\r\n        let i,j;\r\n        for (i = 0; i < currentLevel; i++)\r\n            tabs += \"\\t\";\r\n        let destination = \"\";\r\n        destination += \"\" + tabs + \"{\\n\";\r\n        j = 0;\r\n        let size = this._input.size;\r\n        logger.info('size of the map ' + this._input.size);\r\n\r\n        this._input.forEach(function(value, key) {\r\n            var keyAppendable = {\r\n                destination : \"\"\r\n            }\r\n            var valueAppendable = {\r\n                destination : \"\"\r\n            }\r\n         \r\n            key.formatJsonToString(keyAppendable,currentLevel);\r\n            destination += keyAppendable.destination;\r\n            destination += \" : \";\r\n            \r\n            value.keyValue = true;\r\n            value.formatJsonToString(valueAppendable,currentLevel);\r\n            destination += valueAppendable.destination;\r\n            if(j != (size-1))\r\n                destination += \",\\n\";\r\n            j++;  \r\n        });\r\n        destination += \"\\n\" + tabs + \"}\";\r\n        appendable.destination += destination;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        logger.debug('formatting to html...' + this._root);\r\n        if(this._root) {\r\n            destination += \"<div class=\\\"json-viewer\\\"><code class=\\\"js\\\" id=\\\"js\\\">\";\r\n        }\r\n        logger.debug('formatting to html...');\r\n        \r\n        let size = this._input.size;\r\n        destination += \"<a class=\\\"list-link\\\" href=\\\"javascript:void(0)\\\">{\";\r\n        destination += \"<span style=\\\"color: #1d57d4;\\\"><i onClick=\\\"spanClicked(event);\\\" class=\\\"far fa-minus-square\\\"></i></span>\";\r\n        destination += \"<span style=\\\"color: #1d57d4;\\\" class=\\\"hide\\\"><i onClick=\\\"spanClicked(event);\\\" class=\\\"fas fa-plus-square\\\"></i></span>\";\r\n        destination += \"<span class=\\\"hide\\\"><span onClick=\\\"spanClicked(event);\\\" class=\\\"items-ph\\\">\" + size + \" items</span></span>\";\r\n        destination += \"</a>\";\r\n        let j = 0;\r\n        destination += \"<ul data-level=\\\"\" + ++currentLevel + \"\\\" class=\\\"type-array\\\">\";\r\n        this._input.forEach(function(value, key) {\r\n            destination += \"<li>\";\r\n            var keyAppendable = {\r\n                destination : \"\"\r\n            }\r\n            key.formatJsonToHtml(keyAppendable,currentLevel);\r\n            destination += keyAppendable.destination;\r\n            destination += \"<span class=\\\"type-colon\\\">:</span>\";\r\n\t\t\tvar valueAppendable = {\r\n                destination : \"\"\r\n            }\r\n            value.formatJsonToHtml(valueAppendable,currentLevel);\r\n            destination += valueAppendable.destination;\r\n            logger.debug(\"j value \" + j);\r\n            if(j != (size-1))\r\n                destination += \"<span class=\\\"type-comma\\\">\" + \",\" + \"</span>\";\r\n            destination += \"</li>\";\r\n            j++;  \r\n        });\r\n        destination += \"</ul>\";\r\n        destination += \"<span class=\\\"type-symbol\\\">}</span>\";\r\n        if(this._root) {\r\n            destination += \"</code></div>\";\r\n        }\r\n\r\n        appendable.destination = destination;\r\n    }\r\n}","\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonBoolean extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    toUnformattedString(appendable, currentLevel) {\r\n        appendable.destination = null;\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        //console.log('destination->' + destination);\r\n        appendable.destination = null;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        destination += \"<span class=\\\"type-null\\\">\";\r\n        destination += this._input + \"</span>\";\r\n        appendable.destination = destination;\r\n    }\r\n}","\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonNumber extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    toUnformattedString(appendable, currentLevel) {\r\n        appendable.destination += this._input;\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        //console.log('destination->' + destination);\r\n        appendable.destination += this._input;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        destination += \"<span class=\\\"type-number\\\">\";\r\n        destination += this._input + \"</span>\";\r\n        appendable.destination = destination;\r\n    }\r\n}","export default class JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        // if (this.constructor === JsonObject) {\r\n        //     throw new TypeError(\"Can not construct abstract class.\");\r\n        // }\r\n\r\n        if (this.formatJsonToString === JsonObject.prototype.formatJsonToString) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract method formatJsonToString.\");\r\n        }\r\n\r\n        if (this.formatJsonToHtml === JsonObject.prototype.formatJsonToHtml) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract method formatJsonToHtml.\");\r\n        }\r\n        this._root = root;\r\n        this._isKey = isKey;\r\n        this._input = input;\r\n        this._keyValue = false;\r\n        this._rawInput = '';\r\n    }\r\n\r\n    get root() {\r\n        return this._root;\r\n    }\r\n\r\n    set root(newRoot) {\r\n        this._root = newRoot;\r\n    }\r\n\r\n    get isKey() {\r\n        return this._isKey;\r\n    }\r\n\r\n    set isKey(newKey) {\r\n        this._isKey = newKey;\r\n    }\r\n\r\n    get input() {\r\n        return this._input;\r\n    }\r\n\r\n    set input(newInput) {\r\n        this._input = newInput;\r\n    }\r\n\r\n    get rawInput() {\r\n        return this._rawInput;\r\n    }\r\n\r\n    set rawInput(raw) {\r\n        this._rawInput = raw;\r\n    }\r\n\r\n    set keyValue(newValue) {\r\n        this._keyValue = newValue;\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        throw new TypeError(\"Do not call abstract method toString from child.\");\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        throw new TypeError(\"Do not call abstract method toHtml from child.\");\r\n    }\r\n}","import JsonObject from './JsonObject.js';\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class JsonString extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n        this.removeSpecialChars();\r\n    }\r\n\r\n    removeSpecialChars() {\r\n        var tmp = this._input;\r\n        var i = 0;\r\n        var r = [];\r\n        for(i=0;i<tmp.length;i++) {\r\n            if(tmp[i] != '\\r' && tmp[i] != '\\t' && tmp[i] != '\\n') {\r\n                r.push(tmp[i]);\r\n            }\r\n        }\r\n\r\n        this._input = r.join(\"\");\r\n    }\r\n\r\n    toUnformattedString(appendable, currentLevel) {\r\n        ++currentLevel;\r\n        let destination = \"\";\r\n        let i;\r\n        logger.debug('appendable->' + appendable);\r\n        if (this._isKey) {\r\n            destination += \"\\\"\" + this._input + \"\\\"\";\r\n        } else if (this._keyValue) {    \r\n            destination += \"\\\"\" + this._input + \"\\\"\";\r\n        } else {\r\n            destination += \"\\\"\" + this._input + \"\\\"\";\r\n        }\r\n        logger.debug('destination->' + destination);\r\n        appendable.destination = destination;\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        ++currentLevel;\r\n        let destination = \"\";\r\n        let tabs = '';\r\n        let i;\r\n        for (i = 0; i < currentLevel; i++)\r\n            tabs = tabs.concat(\"\\t\");\r\n        logger.debug('appendable->' + appendable);\r\n        if (this._isKey) {\r\n            destination += tabs + \"\\\"\" + this._input + \"\\\"\";\r\n        } else if (this._keyValue) {    \r\n            destination += \"\\\"\" + this._input + \"\\\"\";\r\n        } else {\r\n            destination += tabs + \"\\\"\" + this._input + \"\\\"\";\r\n        }\r\n        logger.debug('destination->' + destination);\r\n        appendable.destination = destination;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        if (this._isKey) {\r\n            destination += \"<span class=\\\"type-key\\\">\\\"\";\r\n        } else {\r\n            destination += \"<span class=\\\"type-string\\\">\\\"\";\r\n        }\r\n        destination += this._input + \"\\\"</span>\";\r\n        appendable.destination = destination;\r\n    }\r\n}","module.exports.debug = (msg) => {\r\n    //console.log(msg);\r\n}\r\nmodule.exports.info = (msg) => {\r\n   //console.log(msg);\r\n}\r\n\r\n// var appRoot = require('app-root-path');\r\n// var winston = require('winston');\r\n\r\n// const logFormat = winston.format.combine(\r\n// \t\t winston.format.colorize(),\r\n// \t\t winston.format.timestamp(),\r\n// \t\t winston.format.align(),\r\n// \t\t winston.format.printf(\r\n// \t\t  info => `${info.timestamp} ${info.level}: ${info.message}`,\r\n// \t\t),);\r\n\r\n// // define the custom settings for each transport (file, console)\r\n// var options = {\r\n//   console: {\r\n//     level: 'debug',\r\n//     handleExceptions: true,\r\n//     json: false,\r\n//     colorize: true\r\n//   }\r\n// };\r\n\r\n// // instantiate a new Winston Logger with the settings defined above\r\n// let logger = winston.createLogger({\r\n// \t  format: logFormat,\r\n// \t  transports: [\r\n// \t    new (winston.transports.Console)(options.console)\r\n// \t  ],\r\n// \t  exitOnError: false, // do not exit on handled exceptions\r\n// \t});\r\n\r\n// // create a stream object with a 'write' function that will be used by `morgan`\r\n// logger.stream = {\r\n//   write: function(message, encoding) {\r\n//     // use the 'info' log level so the output will be picked up by both transports (file and console)\r\n//     logger.info(message);\r\n//   },\r\n// };\r\n\r\n// module.exports = logger;","import JsonString from \"../json/JsonString\";\r\nimport JsonBoolean from \"../json/JsonBoolean\";\r\nimport JsonNumber from \"../json/JsonNumber\";\r\nimport JsonNull from \"../json/JsonNull\";\r\nimport RJsonConstants from \"./RJsonConstants\";\r\nimport StringReader from \"../io/StringReader\";\r\nimport CharStream from \"../io/CharStream\";\r\nimport RJsonLexer from \"./RJsonLexer\";\r\nimport RJsonToken from \"./RJsonToken\";\r\n\r\nexport default class RJsonAbsParser extends RJsonConstants {\r\n\r\n    constructor(rinput,startNow) {\r\n        super();\r\n        \r\n        if(startNow === undefined) {\r\n            this.init(rinput);\r\n        }\r\n    }\r\n\r\n    init(rinput) {\r\n        this.input = rinput;\r\n        this.reader = new StringReader(this.input);\r\n        this.stream = new CharStream(this.reader);\r\n        this.lexer = new RJsonLexer(this.stream);\r\n        this.token = new RJsonToken();\r\n        this.token.next = this.jj_nt = this.lexer.getNextToken();\r\n        this.jj_gen = 0;\r\n        this.jj_la1 = new Array(13);\r\n        this.jj_la1_0 = [0xccf8480, 0x78000, 0x1ccf8000, 0x40, 0x1ccf8000, 0x40, 0xccf8480, 0xccf8000, 0x60000, 0x18000, 0xcc00000, 0x8800000, 0x4400000,];;\r\n        var i;\r\n        for (i = 0; i < 13; i++)\r\n            this.jj_la1[i] = -1;\r\n\r\n        this.jj_kind = -1;\r\n        this.nativeNumbers = false;\r\n    }\r\n\r\n    getNextToken() {\r\n        if ((this.token = this.jj_nt).next != null) this.jj_nt = this.jj_nt.next;\r\n        else this.jj_nt = this.jj_nt.next = this.lexer.getNextToken();\r\n        this.jj_gen++;\r\n        return this.token;\r\n    }\r\n\r\n    objectKey() {\r\n        let o, key;\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                key = this.string();\r\n                break;\r\n            case this.SYMBOL:\r\n                key = this.symbol();\r\n                break;\r\n            case this.NULL:\r\n                this.nullValue();\r\n                key = null;\r\n                break;\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n                switch (this.jj_nt.kind) {\r\n                    case this.TRUE:\r\n                    case this.FALSE:\r\n                        o = this.booleanValue();\r\n                        break;\r\n                    case this.NUMBER_INTEGER:\r\n                    case this.NUMBER_DECIMAL:\r\n                        o = this.number();\r\n                        break;\r\n                    default:\r\n                        this.jj_la1[1] = this.jj_gen;\r\n                        this.jj_consume_token(-1);\r\n                        throw new Error();\r\n                }\r\n                key = o;\r\n                break;\r\n            case this.BRACE_CLOSE:\r\n                break;\r\n            default:\r\n                this.jj_la1[2] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n        { if (true) { if(key) key.key = true; return key; } }\r\n    }\r\n\r\n    string() {\r\n        let s;\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                s = this.doubleQuoteString();\r\n                break;\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n                s = this.singleQuoteString();\r\n                break;\r\n            default:\r\n                this.jj_la1[10] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n        { if (true) return s; }\r\n    }\r\n\r\n    doubleQuoteString() {\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_DOUBLE_EMPTY:\r\n                this.jj_consume_token(this.STRING_DOUBLE_EMPTY);\r\n                { if (true) return new JsonString(false, false, \"\"); }\r\n                break;\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                this.jj_consume_token(this.STRING_DOUBLE_NONEMPTY);\r\n                var image = this.token.image;\r\n                { if (true) return new JsonString(false, false, image); }\r\n                break;\r\n            default:\r\n                this.jj_la1[11] = this.sjj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    singleQuoteString() {\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_SINGLE_EMPTY:\r\n                this.jj_consume_token(this.STRING_SINGLE_EMPTY);\r\n                { if (true) return new JsonString(false, false, \"\"); }\r\n                break;\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n                this.jj_consume_token(this.STRING_SINGLE_NONEMPTY);\r\n                var image = token.image;\r\n                { if (true) return new JsonString(false, false, image); }\r\n                break;\r\n            default:\r\n                this.jj_la1[12] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    symbol() {\r\n        this.jj_consume_token(this.SYMBOL);\r\n        { if (true) return new JsonString(false, false, token.image); }\r\n    }\r\n\r\n    nullValue() {\r\n        this.jj_consume_token(this.NULL);\r\n        { if (true) return new JsonNull(); }\r\n    }\r\n\r\n    booleanValue() {\r\n        var b;\r\n        switch (this.jj_nt.kind) {\r\n            case this.TRUE:\r\n                this.jj_consume_token(this.TRUE);\r\n                b = true;\r\n                break;\r\n            case this.FALSE:\r\n                this.jj_consume_token(this.FALSE);\r\n                b = false;\r\n                break;\r\n            default:\r\n                this.jj_la1[8] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n        { if (true) return new JsonBoolean(b); }\r\n    }\r\n\r\n    value() {\r\n        let x;\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                x = this.string();\r\n                break;\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n                x = this.number();\r\n                break;\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n                x = this.booleanValue();\r\n                break;\r\n            case this.NULL:\r\n                x = this.nullValue();\r\n                break;\r\n            default:\r\n                this.jj_la1[7] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n        { if (true) return x; }\r\n    }\r\n\r\n    number() {\r\n        let t;\r\n        switch (this.jj_nt.kind) {\r\n            case this.NUMBER_DECIMAL:\r\n                t = this.jj_consume_token(this.NUMBER_DECIMAL);\r\n                if (nativeNumbers) {\r\n                    { if (true) return new JsonNumber(false, false, t.image); }\r\n                } else {\r\n                    { if (true) return new JsonNumber(false, false, t.image); }\r\n                }\r\n                break;\r\n            case this.NUMBER_INTEGER:\r\n                t = this.jj_consume_token(this.NUMBER_INTEGER);\r\n                if (this.nativeNumbers) {\r\n                    { if (true) return new JsonNumber(false, false, t.image); }\r\n                } else {\r\n                    { if (true) return new JsonNumber(false, false, t.image); }\r\n                }\r\n                break;\r\n            default:\r\n                this.jj_la1[9] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n    }\r\n}","export default class RJsonConstants {\r\n\r\n    constructor() {\r\n        /** End of File. */\r\n        this.EOF = 0;\r\n        /** RegularExpression Id. */\r\n        this.C_SINGLE_COMMENT = 1;\r\n        /** RegularExpression Id. */\r\n        this.C_MULTILINE_COMMENT = 2;\r\n        /** RegularExpression Id. */\r\n        this.SH_SINGLE_COMMENT = 3;\r\n        /** RegularExpression Id. */\r\n        this.WHITESPACE = 4;\r\n        /** RegularExpression Id. */\r\n        this.EOL = 5;\r\n        /** RegularExpression Id. */\r\n        this.COMMA = 6;\r\n        /** RegularExpression Id. */\r\n        this.BRACE_OPEN = 7;\r\n        /** RegularExpression Id. */\r\n        this.BRACE_CLOSE = 8;\r\n        /** RegularExpression Id. */\r\n        this.COLON = 9;\r\n        /** RegularExpression Id. */\r\n        this.BRACKET_OPEN = 10;\r\n        /** RegularExpression Id. */\r\n        this.BRACKET_CLOSE = 11;\r\n        /** RegularExpression Id. */\r\n        this.ZERO = 12;\r\n        /** RegularExpression Id. */\r\n        this.DIGIT_NONZERO = 13;\r\n        /** RegularExpression Id. */\r\n        this.DIGIT = 14;\r\n        /** RegularExpression Id. */\r\n        this.NUMBER_INTEGER = 15;\r\n        /** RegularExpression Id. */\r\n        this.NUMBER_DECIMAL = 16;\r\n        /** RegularExpression Id. */\r\n        this.TRUE = 17;\r\n        /** RegularExpression Id. */\r\n        this.FALSE = 18;\r\n        /** RegularExpression Id. */\r\n        this.NULL = 19;\r\n        /** RegularExpression Id. */\r\n        this.QUOTE_DOUBLE = 20;\r\n        /** RegularExpression Id. */\r\n        this.QUOTE_SINGLE = 21;\r\n        /** RegularExpression Id. */\r\n        this.STRING_SINGLE_EMPTY = 22;\r\n        /** RegularExpression Id. */\r\n        this.STRING_DOUBLE_EMPTY = 23;\r\n        /** RegularExpression Id. */\r\n        this.STRING_SINGLE_BODY = 24;\r\n        /** RegularExpression Id. */\r\n        this.STRING_DOUBLE_BODY = 25;\r\n        /** RegularExpression Id. */\r\n        this.STRING_SINGLE_NONEMPTY = 26;\r\n        /** RegularExpression Id. */\r\n        this.STRING_DOUBLE_NONEMPTY = 27;\r\n        /** RegularExpression Id. */\r\n        this.SYMBOL = 28;\r\n\r\n        /** Lexical state. */\r\n        this.DEFAULT = 0;\r\n\r\n        this.LEXICAL_ERROR = 0;\r\n\r\n        /** Literal token values. */\r\n        this.tokenImage = [\r\n            \"<EOF>\",\r\n            \"<C_SINGLE_COMMENT>\",\r\n            \"<C_MULTILINE_COMMENT>\",\r\n            \"<SH_SINGLE_COMMENT>\",\r\n            \"<WHITESPACE>\",\r\n            \"<EOL>\",\r\n            \"\\\",\\\"\",\r\n            \"\\\"{\\\"\",\r\n            \"\\\"}\\\"\",\r\n            \"\\\":\\\"\",\r\n            \"\\\"[\\\"\",\r\n            \"\\\"]\\\"\",\r\n            \"\\\"0\\\"\",\r\n            \"<DIGIT_NONZERO>\",\r\n            \"<DIGIT>\",\r\n            \"<NUMBER_INTEGER>\",\r\n            \"<NUMBER_DECIMAL>\",\r\n            \"\\\"true\\\"\",\r\n            \"\\\"false\\\"\",\r\n            \"\\\"null\\\"\",\r\n            \"\\\"\\\\\\\"\\\"\",\r\n            \"\\\"\\\\\\'\\\"\",\r\n            \"\\\"\\\\\\'\\\\\\'\\\"\",\r\n            \"\\\"\\\\\\\"\\\\\\\"\\\"\",\r\n            \"<STRING_SINGLE_BODY>\",\r\n            \"<STRING_DOUBLE_BODY>\",\r\n            \"<STRING_SINGLE_NONEMPTY>\",\r\n            \"<STRING_DOUBLE_NONEMPTY>\",\r\n            \"<SYMBOL>\",\r\n        ];\r\n    }\r\n}","import RJsonToken from './RJsonToken.js';\r\nimport RJsonTokenMgrError from './RJsonTokenMgrError.js';\r\nimport RJsonConstants from './RJsonConstants.js';\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class RJsonLexer extends RJsonConstants {\r\n\r\n    constructor(istream) {\r\n        super();\r\n        this.input_stream = istream;\r\n        this.curChar = '';\r\n        this.matchedKind = 0;\r\n        this.matchedPos = 0;\r\n        this.toToken = [0x1ccf8fc1,];\r\n        this.curLexState = 0;\r\n        // this.strLiteralImages = [\r\n        //     \"\", null, null, null, null, 'null', '0o54', 0o173, 0o175, 0o072, 0o133, \r\n        //     0o135, null, null, null, null, null, null, null, null, null, null, \"\\'\", \r\n        //     \"\\\"\", null, null, null, null, null, ];\r\n        this.strLiteralImages = [\r\n            \"\", null, null, null, null, 'null', ',', '{', '}', ':', '[',\r\n            ']', null, null, null, null, null, null, null, null, null, null, \"\\'\",\r\n            \"\\\"\", null, null, null, null, null,];\r\n    }\r\n\r\n    getNextToken() {\r\n        logger.debug(\"getNextToken()\");\r\n        var matchedToken = null;\r\n        var curPos = 0;\r\n        EOFLoop:\r\n        for (; ;) {\r\n            try {\r\n                this.curChar = this.input_stream.beginToken();\r\n            } catch (e) {\r\n                logger.debug(e.stack);\r\n                this.matchedKind = 0;\r\n                matchedToken = this.fillToken();\r\n                return matchedToken;\r\n            }\r\n            logger.debug(\"this.curChar =\" + this.curChar);\r\n            this.matchedKind = 0x7fffffff;\r\n            this.matchedPos = 0;\r\n            curPos = this.analyzeCurrentCharacter();\r\n            logger.debug(\"matchedKind()->\" + this.matchedKind + \",curPos->\" + curPos);\r\n            if (this.matchedKind != 0x7fffffff) {\r\n               \r\n                if (this.matchedPos + 1 < curPos) {\r\n                    this.input_stream.backup(curPos - this.matchedPos - 1); // possible backtracking.\r\n                }\r\n                logger.debug(\"curPos=\" + curPos);\r\n                if ((this.matchedKind == this.C_SINGLE_COMMENT)\r\n                    || (this.matchedKind == this.C_MULTILINE_COMMENT) ) {\r\n                        logger.debug(\"this.matchedKind=\" + this.matchedKind);\r\n                    this.matchedToken = this.fillToken();\r\n                    logger.debug(\"getNextToken()::Matched\" + this.matchedKind);\r\n                    return matchedToken;\r\n                }\r\n                if (this.matchedKind == this.BRACE_OPEN || this.matchedKind == this.TRUE\r\n                    || this.matchedKind == this.NUMBER_INTEGER\r\n                    || this.matchedKind == this.NULL\r\n                    || this.matchedKind == this.COMMA \r\n                    || this.matchedKind == this.STRING_DOUBLE_EMPTY\r\n                    || this.matchedKind == this.STRING_DOUBLE_EMPTY) {\r\n                    matchedToken = this.fillToken();\r\n                    logger.debug(\"getNextToken()::Matched->\" + matchedToken);\r\n                    return matchedToken;\r\n                }\r\n                if ((this.toToken[this.matchedKind >> 6] & (1 << (this.matchedKind & 77))) != 0) {\r\n                    matchedToken = this.fillToken();\r\n                    logger.debug(\"getNextToken()::Matched >> 6->\" + this.matchedKind);\r\n                    return matchedToken;\r\n                } else {\r\n                    continue EOFLoop;\r\n                }\r\n            }\r\n            // error begins.....\r\n            let error_line = this.input_stream.getEndLine;\r\n            let error_column = this.input_stream.getEndColumn;\r\n            let error_after = null;\r\n            let EOFSeen = false;\r\n            try {\r\n                this.input_stream.readChar();\r\n                this.input_stream.backup(1);\r\n            } catch (e1) {\r\n                logger.debug(e1.stack);\r\n                EOFSeen = true;\r\n                error_after = curPos <= 1 ? \"\" : this.input_stream.getImage();\r\n                if (this.curChar == '\\n' || this.curChar == '\\r') {\r\n                    error_line++;\r\n                    error_column = 0;\r\n                } else {\r\n                    error_column++;\r\n                }\r\n            }\r\n            logger.debug('xxxxxxxxxxxx');\r\n            if (!EOFSeen) {\r\n                logger.debug('xxxxxxxxxxxx');\r\n                this.input_stream.backup(1);\r\n                error_after = curPos <= 1 ? \"\" : this.input_stream.getImage();\r\n            }\r\n            logger.debug('zzzzzzzzzzzzzzzz');\r\n            throw new RJsonTokenMgrError(EOFSeen, this.curLexState, error_line, error_column, error_after, this.curChar, this.LEXICAL_ERROR);\r\n        }\r\n    }\r\n\r\n    analyzeCurrentCharacter() {\r\n        if (this.curChar == ' ' || this.curChar == '\\t' || this.curChar == '\\n' || this.curChar == '\\r') {\r\n            this.consume_char();\r\n            try {\r\n                this.curChar = this.input_stream.readChar();\r\n            } catch (e) {\r\n                // hack for special characters after the last token.\r\n                this.matchedKind = 0;\r\n                return 1;\r\n            }\r\n            return this.analyzeCurrentCharacter();\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        //logger.debug('analyzeCurrentCharacter()->' + code);\r\n        switch (code) {\r\n            case 123: // '{'\r\n                return this.stopAtPos(0, this.BRACE_OPEN);\r\n            case 125: // '}'\r\n                return this.stopAtPos(0, this.BRACE_CLOSE);\r\n            case 34: // '\"'\r\n                logger.debug('case 34()->' + code);\r\n                return this.moveChar01(8);\r\n            case 39: // '\\''\r\n                return this.moveChar01(4);\r\n            case 44: // ','\r\n                return this.stopAtPos(0, this.COMMA);\r\n            case 58: // ':'\r\n                return this.stopAtPos(0, this.COLON);\r\n            case 91: // '['\r\n                return this.stopAtPos(0, this.BRACKET_OPEN);\r\n            case 93: // ']'\r\n                return this.stopAtPos(0, this.BRACKET_CLOSE);\r\n            case 70: // 'F'\r\n            case 102: // 'f'\r\n                return this.moveChar01(4);\r\n            case 78: // 'N'\r\n            case 110: // 'n'\r\n                return this.moveChar01(8);\r\n            case 84: // 'T'\r\n            case 116: // 't'\r\n                return this.moveChar01(2);\r\n            case 47: // '/'\r\n                return this.moveChar01(6);\r\n            case 35: // '#'\r\n                return this.moveChar(0, '\\n');\r\n            default:\r\n                return this.findNumber(0, 0);\r\n        }\r\n    }\r\n\r\n    isDigit() {\r\n        \r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"isDigit-\\\"\" + code + \"\\\"\");\r\n\r\n        if (code == 46) { // '.'\r\n            return true;\r\n        }\r\n\r\n        if (code > 47 && code < 58) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findNumber(startState, curPos) {\r\n        logger.debug(\"findNumber=\\\"\" + this.curChar + \"\\\"\");\r\n        while (this.isDigit()) {\r\n            ++curPos;\r\n            try {\r\n                this.curChar = this.input_stream.readChar();\r\n            } catch (e) {\r\n                return curPos;\r\n            }\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"\\\"\" + code + \"\\\"\");\r\n        if (code == 44 || code == 125\r\n            || this.curChar == '\\r' || this.curChar == '\\n' || this.curChar == ' '\r\n            || this.curChar == '\\t') {\r\n            --curPos;\r\n            logger.debug(\"\\\"\" + code + \"\\\"\");\r\n            this.matchedKind = this.NUMBER_INTEGER;\r\n            this.matchedPos = curPos;\r\n            this.input_stream.backup(1);\r\n            return curPos;\r\n        }\r\n        // not a valid numbers\r\n        return curPos;\r\n    }\r\n\r\n    findStringLiteral(curPos, active0) {\r\n        //logger.debug(\"finding string literal\");\r\n        var kind = 0x7fffffff;\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 1;\r\n        }\r\n        for (; ;) {\r\n            let code = this.curChar.charCodeAt();\r\n            //logger.debug(\"findStringLiteral() = \" + code);\r\n            switch (code) {\r\n                case 34: // '\"'\r\n                    kind = this.STRING_DOUBLE_NONEMPTY;\r\n                    break;\r\n                case 92: // '\\escape char\r\n                    // check if the next char is '\"', then it is escape sequence. consume the next token.\r\n                    try {\r\n                        this.curChar = this.input_stream.readChar();\r\n                    } catch (e) {\r\n                        return 1;\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            ++curPos;\r\n            if (kind != 0x7fffffff) {\r\n                this.matchedKind = kind;\r\n                this.matchedPos = curPos;\r\n                //logger.debug(\"returning curPos = \" + curPos);\r\n                return curPos;\r\n            }\r\n            try {\r\n                this.curChar = this.input_stream.readChar();\r\n            } catch (e) {\r\n                logger.debug(e.stack);\r\n                return curPos;\r\n            }\r\n        }\r\n    }\r\n\r\n    moveChar(curPos, target) {\r\n        logger.debug(\"moveChar::curChar=\" + this.curChar + \",target=\" + target);\r\n        var kind = 0x7fffffff;\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 1;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        for (; ;) {\r\n            if (this.curChar == '\\n' || this.curChar == '\\r' || this.curChar == '\\f') {\r\n                kind = this.C_SINGLE_COMMENT;\r\n            }\r\n            if (code == 42) { // '*'\r\n                \r\n                // lookahead for char '/'\r\n                try {\r\n                    this.curChar = this.input_stream.readChar();\r\n                } catch (e) {\r\n                    return 1;\r\n                }\r\n                let ccode = this.curChar.charCodeAt();\r\n                if (ccode == 47) {\r\n                    ++curPos;\r\n                    kind = this.C_MULTILINE_COMMENT;\r\n                } else {\r\n                    this.input_stream.backup(1);\r\n                }\r\n            }\r\n\r\n            ++curPos;\r\n            if (kind != 0x7fffffff) {\r\n                this.matchedKind = kind;\r\n                this.matchedPos = curPos;\r\n                return curPos;\r\n            }\r\n            try {\r\n                this.curChar = this.input_stream.readChar();\r\n            } catch (e) {\r\n                return curPos;\r\n            }\r\n            code = this.curChar.charCodeAt();\r\n        }\r\n    }\r\n\r\n    moveChar01(active0) {\r\n        try {\r\n            //logger.debug(\"@moveChar01::curChar=\" + this.curChar + \",code=\" + code);\r\n            this.curChar = this.input_stream.readChar();\r\n            //logger.debug(\"@moveChar01::curChar=\" + this.curChar + \",code=\" + code);\r\n        } catch (e) {\r\n            logger.debug(e.stack);\r\n            return 1;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"moveChar01::curChar=\" + this.curChar + \",code=\" + code);\r\n        switch (code) {\r\n            case 34: // '\"'\r\n                if ((active0 & 8) != 0)\r\n                    return this.stopAtPos(1, this.STRING_DOUBLE_EMPTY);\r\n                break;\r\n            case 39: // '\\''\r\n                if ((active0 & 4) != 0)\r\n                    return this.stopAtPos(1, this.STRING_SINGLE_EMPTY);\r\n                break;\r\n            case 65: // 'A'\r\n            case 97: // 'a'\r\n                if ((active0 & 4) != 0)\r\n                    return this.moveChar02(active0, 4);\r\n                break;\r\n            case 82: // 'R'\r\n            case 114: // 'r'\r\n                if ((active0 & 2) != 0)\r\n                    return this.moveChar02(active0, 4);\r\n                break;\r\n            case 85: // 'U'\r\n            case 117: // 'u'\r\n                if ((active0 & 8) != 0)\r\n                    return this.moveChar02(active0, 8);\r\n                break;\r\n            case 47: // '/' - C_SINGLE_COMMENT\r\n                if ((active0 & 6) != 0)\r\n                    return this.moveChar(0, '\\n');\r\n                break;\r\n            case 42: // '*' - C_MULTILINE_COMMENT\r\n                if ((active0 & 6) != 0)\r\n                    return this.moveChar(0, '*');\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n        return this.findStringLiteral(0, active0);\r\n    }\r\n\r\n    moveChar02(old0, active0) {\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 2;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        //logger.debug(\"moveChar02::curChar=\" + this.curChar + \",code=\" + code);\r\n        switch (code) {\r\n            case 76: // L\r\n            case 108:// l\r\n                return this.moveChar03(active0, 5);\r\n            case 85:// U\r\n            case 117:// u\r\n                return this.moveChar03(active0, 2);\r\n            default:\r\n                break;\r\n        }\r\n        return this.findStringLiteral(1, active0);\r\n    }\r\n\r\n    moveChar03(old0, active0) {\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 3;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"moveChar03::curChar=\" + this.curChar + \",code=\" + code);\r\n        switch (code) {\r\n            case 69: // E\r\n            case 101: // e\r\n                if ((active0 & 2) != 0)\r\n                    return this.stopAtPos(3, this.TRUE);\r\n                break;\r\n            case 76: // L\r\n            case 108:// l\r\n                \r\n                if ((active0 & 5) != 0) {\r\n                    logger.debug('moveChar03->foundNull-' + (active0 & 5));\r\n                    return this.stopAtPos(3, this.NULL);\r\n                }\r\n                break;\r\n            case 83: // S\r\n            case 115:// s\r\n                return this.moveChar04(active0, 4);\r\n            default:\r\n                break;\r\n        }\r\n        return this.findStringLiteral(2, active0);\r\n    }\r\n\r\n    moveChar04(old0, active0) {\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 4;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"moveChar04::curChar=\" + this.curChar + \",code=\" + code);\r\n        switch (code) {\r\n            case 69: // E\r\n            case 101:// e\r\n                if ((active0 & 4) != 0)\r\n                    return this.stopAtPos(4, this.FALSE);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    stopAtPos(pos, kind) {\r\n        this.matchedKind = kind;\r\n        this.matchedPos = pos;\r\n        return pos + 1;\r\n    }\r\n\r\n    checkForSpace() {\r\n        let code = this.curChar.charCodeAt();\r\n        if (code == 32) {\r\n            try {\r\n                curChar = input_stream.readChar();\r\n            } catch (e) {\r\n            }\r\n            let ccode = this.curChar.charCodeAt();\r\n            if (ccode != 32) {\r\n                input_stream.backup(1);\r\n                return;\r\n            } else {\r\n                this.checkForSpace();\r\n            }\r\n        }\r\n    }\r\n\r\n    fillToken() {\r\n        let beginLine = this.input_stream.getBeginLine;\r\n        let beginColumn = this.input_stream.getBeginColumn;\r\n        let endLine = this.input_stream.getEndLine;\r\n        let endColumn = this.input_stream.getEndColumn;\r\n        var im = this.strLiteralImages[this.matchedKind];\r\n        let tokenImage = (im == null) ? this.input_stream.getImage() : im;\r\n        //let tokenImage = this.input_stream.getImage();\r\n        let token = RJsonToken.newToken(this.matchedKind, tokenImage);\r\n        logger.debug('generated new token ->' + token.toString());\r\n        token.beginLine = beginLine;\r\n        token.endLine = endLine;\r\n        token.beginColumn = beginColumn;\r\n        token.endColumn = endColumn;\r\n        return token;\r\n    }\r\n\r\n    consume_char() {\r\n        if (this.curChar == '\\n') {\r\n        } else if (this.curChar == ' ') {\r\n            this.input_stream.spaceDetected();\r\n        }\r\n\r\n    }\r\n}\r\n","import JsonMap from \"../json/JsonMap\";\r\nimport JsonList from \"../json/JsonList\";\r\nimport RJsonAbsParser from \"./RJsonAbsParser\";\r\nimport RJsonParserError from \"./RJsonParserError\";\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class RJsonParser extends RJsonAbsParser {\r\n\r\n    constructor(rinput, startNow) {\r\n        super(rinput, startNow);\r\n    }\r\n\r\n    parse() {\r\n\r\n        var toReturn = this.anything();\r\n        toReturn.root = true;\r\n        toReturn.rawInput = this.input;\r\n        if (!this.ensureEOF()) {\r\n            throw new Error(\"parser.expectedEOF\");\r\n        }\r\n        return toReturn;\r\n\r\n    }\r\n\r\n    anything() {\r\n        logger.debug(\"RJsonParser::anything()\" + this.jj_nt);\r\n        let x;\r\n        switch (this.jj_nt.kind) {\r\n            case this.BRACE_OPEN:\r\n                x = this.object();\r\n                break;\r\n            case this.BRACKET_OPEN:\r\n                x = this.list();\r\n                break;\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n            case this.NULL:\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                x = this.value();\r\n                break;\r\n            case this.BRACKET_CLOSE:\r\n                break;\r\n            default:\r\n                this.jj_la1[0] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new RJsonParserError();\r\n        }\r\n        { if (true) return x; }\r\n    }\r\n\r\n    object() {\r\n        let map = new JsonMap(true, false, new Map());\r\n        let key, value;\r\n        this.jj_consume_token(this.BRACE_OPEN);\r\n        switch (this.jj_nt.kind) {\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n            case this.NULL:\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n            case this.SYMBOL:\r\n                key = this.objectKey();\r\n                this.jj_consume_token(this.COLON);\r\n                value = this.anything();\r\n                value.key = true;\r\n                map.put(key, value);\r\n                key = null; value = null;\r\n                label_1:\r\n                while (true) {\r\n                    switch (this.jj_nt.kind) {\r\n                        case this.COMMA:\r\n                            ;\r\n                            break;\r\n                        default:\r\n                            this.jj_la1[3] = this.jj_gen;\r\n                            break label_1;\r\n                    }\r\n                    logger.debug('^^^^^^^^->' + this.jj_nt.kind);\r\n                    this.jj_consume_token(this.COMMA);\r\n                    logger.debug('^^^^^^^^->' + this.jj_nt.kind);\r\n                    key = this.objectKey();\r\n                    if (!key)\r\n                        break;\r\n                    this.jj_consume_token(this.COLON);\r\n                    value = this.anything();\r\n                    value.key = true;\r\n                    map.put(key, value);\r\n                    key = null; value = null;\r\n                }\r\n                break;\r\n            default:\r\n                this.jj_la1[4] = this.jj_gen;\r\n        }\r\n        this.jj_consume_token(this.BRACE_CLOSE);\r\n        { if (true) return map; }\r\n    }\r\n\r\n    list() {\r\n        let list = new JsonList(true, false, []);\r\n        logger.debug(\"RJsonParser::list()\" + this.jj_nt.toString());\r\n        let value;\r\n        this.jj_consume_token(this.BRACKET_OPEN);\r\n        switch (this.jj_nt.kind) {\r\n            case this.BRACE_OPEN:\r\n            case this.BRACKET_OPEN:\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n            case this.NULL:\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                value = this.anything();\r\n                list.add(value);\r\n                value = null;\r\n                label_2:\r\n                while (true) {\r\n                    switch (this.jj_nt.kind) {\r\n                        case this.COMMA:\r\n                            ;\r\n                            break;\r\n                        default:\r\n                            this.jj_la1[5] = this.jj_gen;\r\n                            break label_2;\r\n                    }\r\n                    logger.debug('^^^^^^^^->' + this.jj_nt.kind);\r\n                    this.jj_consume_token(this.COMMA);\r\n                    logger.debug('^^^^^^^^->' + this.jj_nt.kind);\r\n                    value = this.anything();\r\n                    if(!value)\r\n                        break;\r\n                    list.add(value);\r\n                    value = null;\r\n                }\r\n                break;\r\n            default:\r\n                this.jj_la1[6] = this.jj_gen;\r\n                ;\r\n        }\r\n        this.jj_consume_token(this.BRACKET_CLOSE);\r\n        { if (true) return list; }\r\n    }\r\n\r\n\r\n\r\n    ensureEOF() {\r\n        this.jj_consume_token(0);\r\n        { if (true) return true; }\r\n    }\r\n\r\n    jj_consume_token(kind) {\r\n\r\n        logger.debug(\"01-RJsonParser::jj_consume_token::this.jj_nt=\" + this.jj_nt + \",cKind=\" + kind + \",this.jj_nt.next=\" + this.jj_nt.next);\r\n        var oldToken = this.token;\r\n        if ((this.token = this.jj_nt).next != null) {\r\n            this.jj_nt = this.jj_nt.next;\r\n        } else {\r\n            this.jj_nt = this.jj_nt.next = this.lexer.getNextToken();\r\n            logger.debug(\"02-RJsonParser::jj_consume_token::this.jj_nt=\" + this.jj_nt + \",cKind=\" + kind + \",this.jj_nt.next=\" + this.jj_nt.next);\r\n        }\r\n        logger.debug('token.kind=' + this.token.kind);\r\n\r\n        if (this.token.kind === kind) {\r\n            logger.debug(\"03-RJsonParser::jj_consume_token::matched(this.token.kind)\" + this.token.kind + \",ckind=\" + kind);\r\n            this.jj_gen++;\r\n            return this.token;\r\n        }\r\n\r\n\r\n        this.jj_nt = this.token;\r\n        this.token = oldToken;\r\n        this.jj_kind = kind;\r\n        //logger.debug('-------------------');\r\n        var parserError = this.generateParseException();\r\n        //logger.debug('-------------------' + e.message);\r\n        throw parserError;\r\n    }\r\n\r\n    generateParseException() {\r\n        logger.debug('generateParseException');\r\n        var jj_expentries = [];\r\n        var la1tokens = [];\r\n        var jj_expentry = [];\r\n        var i, j, k, l;\r\n        if (this.jj_kind >= 0) {\r\n            la1tokens[this.jj_kind] = true;\r\n            this.jj_kind = -1;\r\n        }\r\n        for (i = 0; i < 13; i++) {\r\n            if (this.jj_la1[i] == this.jj_gen) {\r\n                for (j = 0; j < 32; j++) {\r\n                    if ((this.jj_la1_0[i] & (1 << j)) != 0) {\r\n                        la1tokens[j] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (k = 0; k < 29; k++) {\r\n            if (la1tokens[k]) {\r\n                jj_expentry[0] = k;\r\n                jj_expentries.push(jj_expentry);\r\n            }\r\n        }\r\n        var exptokseq = [];\r\n        for (l = 0; l < jj_expentries.size; l++) {\r\n            exptokseq[l] = jj_expentries[l];\r\n        }\r\n\r\n        var e = new RJsonParserError(this.token, exptokseq, this.tokenImage);\r\n        logger.debug('generateParseException ::' + e.getMessage());\r\n        return e;\r\n    }\r\n\r\n    static runParser(input) {\r\n        var instance = new RJsonParser(input);\r\n        var jsonObject = instance.parse();\r\n        return jsonObject;\r\n    }\r\n}\r\n\r\nexport function runParser(input) {\r\n    RJsonParser.runParser(input);\r\n}","var logger = require('../logger/logger');\r\n\r\nexport default class RJsonParserError extends Error {\r\n\r\n    constructor(_currentTokenVal, _expectedTokenSequencesVal, _tokenImageVal) {\r\n        super();\r\n        this.name = \"RJsonParserError\"; \r\n        this.currentToken = _currentTokenVal;\r\n        this.expectedTokenSequences = _expectedTokenSequencesVal;\r\n        this.tokenImage = _tokenImageVal;\r\n        this.eol = \"&\";\r\n    }\r\n\r\n    getMessage() {\r\n        let expected = '';\r\n        let maxSize, i, j = 0;\r\n        for (i = 0; i < this.expectedTokenSequences.length; i++) {\r\n            if (maxSize < this.expectedTokenSequences[i].length) {\r\n                maxSize = this.expectedTokenSequences[i].length;\r\n            }\r\n            for (j = 0; j < this.expectedTokenSequences[i].length; j++) {\r\n                expected += this.tokenImage[this.expectedTokenSequences[i][j]] + ' ';\r\n            }\r\n            if (this.expectedTokenSequences[i][this.expectedTokenSequences[i].length - 1] != 0) {\r\n                expected += \"...\";\r\n            }\r\n            expected += eol + \"    \";\r\n        }\r\n\r\n        let retval = \"Encountered \\\"\";\r\n        let tok = this.currentToken.next;\r\n        for (i = 0; i < maxSize; i++) {\r\n            if (i != 0) retval += \" \";\r\n            if (tok.kind == 0) {\r\n                retval += this.tokenImage[0];\r\n                break;\r\n            }\r\n            retval += \" \" + this.tokenImage[tok.kind];\r\n            retval += \" \\\"\";\r\n            retval += this.add_escapes(tok.image);\r\n            retval += \" \\\"\";\r\n            tok = tok.next;\r\n        }\r\n\r\n        retval += \"\\\" at line \" + this.currentToken.next.beginLine + \", column \" + this.currentToken.next;\r\n        retval += \".\" + this.eol;\r\n        if (this.expectedTokenSequences.length == 1) {\r\n            retval += \"Was expecting:\" + this.eol + \"    \";\r\n        } else {\r\n            retval += \"Was expecting one of:\" + this.eol + \"    \";\r\n        }\r\n        retval += expected;\r\n        this.message = retval;\r\n        logger.debug(this.message);\r\n        return retval;\r\n    }\r\n\r\n    addEscapes(str) {\r\n        let i,ch;\r\n        let retval = \"\";\r\n        for (i = 0; i < str.length; i++) {\r\n            switch (str.charAt(i)) {\r\n                case 0:\r\n                    continue;\r\n                case '\\b':\r\n                    retval += \"\\\\b\";\r\n                    continue;\r\n                case '\\t':\r\n                    retval += \"\\\\t\";\r\n                    continue;\r\n                case '\\n':\r\n                    retval += \"\\\\n\";\r\n                    continue;\r\n                case '\\f':\r\n                    retval += \"\\\\f\";\r\n                    continue;\r\n                case '\\r':\r\n                    retval += \"\\\\r\";\r\n                    continue;\r\n                case '\\\"':\r\n                    retval += \"\\\\\\\"\";\r\n                    continue;\r\n                case '\\'':\r\n                    retval += \"\\\\\\'\";\r\n                    continue;\r\n                case '\\\\':\r\n                    retval += \"\\\\\\\\\";\r\n                    continue;\r\n                default:\r\n                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\r\n                        var s = \"0000\" + ch.toString();\r\n                        retval += \"\\\\u\" + s.substring(s.length - 4, s.length);\r\n                    } else {\r\n                        retval += ch;\r\n                    }\r\n                    continue;\r\n            }\r\n        }\r\n        return retval.toString();\r\n    }\r\n}","var logger = require('../logger/logger');\r\n\r\nexport default class RJsonToken {\r\n    constructor(ofkind,nimage) {\r\n        this._kind = ofkind;\r\n        this._image = nimage;\r\n        this._next = null;\r\n        this.specialToken = null;\r\n    }\r\n\r\n    set next(newNext) {\r\n        this._next = newNext;\r\n    }\r\n\r\n    get next() {\r\n        return this._next;\r\n    }\r\n\r\n    set beginLine(line) {\r\n        this._beginLine = line;\r\n    }\r\n\r\n    get beginLine() {\r\n        return this._beginLine;\r\n    }\r\n\r\n    set endLine(line) {\r\n        this._endLine = line;\r\n    }\r\n\r\n    set beginColumn(column) {\r\n        this._beginColumn = column;\r\n    }\r\n\r\n    get beginColumn() {\r\n        return this._beginColumn;\r\n    }\r\n\r\n    set endColumn(column) {\r\n        this._endColumn = column;\r\n    }\r\n\r\n    get kind() {\r\n        return this._kind;\r\n    }\r\n\r\n    set kind(newKind) {\r\n        this._kind = newKind;\r\n    }\r\n\r\n    get image() {\r\n        logger.debug('returning from token image length ->' + this._image.length);\r\n        return this._image;\r\n    }\r\n\r\n    static newToken(kind,image) {\r\n        return new RJsonToken(kind,image);\r\n    }\r\n\r\n    toString() {\r\n     return \"kind=\" + this._kind + \",image=\" + this.image;\r\n    }\r\n}","var logger = require('../logger/logger');\r\n\r\nexport default class RJsonTokenMgrError {\r\n    static addEscapes(str) {\r\n        //logger.debug('addEscapes)' + str);\r\n        let i,ch;\r\n        let retval = \"\";\r\n        for (i = 0; i < str.length; i++) {\r\n            switch (str.charAt(i)) {\r\n                case 0:\r\n                    continue;\r\n                case '\\b':\r\n                    retval += \"\\\\b\";\r\n                    continue;\r\n                case '\\t':\r\n                    retval += \"\\\\t\";\r\n                    continue;\r\n                case '\\n':\r\n                    retval += \"\\\\n\";\r\n                    continue;\r\n                case '\\f':\r\n                    retval += \"\\\\f\";\r\n                    continue;\r\n                case '\\r':\r\n                    retval += \"\\\\r\";\r\n                    continue;\r\n                case '\\\"':\r\n                    retval += \"\\\\\\\"\";\r\n                    continue;\r\n                case '\\'':\r\n                    retval += \"\\\\\\'\";\r\n                    continue;\r\n                case '\\\\':\r\n                    retval += \"\\\\\\\\\";\r\n                    continue;\r\n                default:\r\n                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\r\n                        var s = \"0000\" + ch.toString();\r\n                        retval += \"\\\\u\" + s.substring(s.length - 4, s.length);\r\n                        //logger.debug('retval' + retval);\r\n                    } else {\r\n                        retval += ch;\r\n                    }\r\n                    continue;\r\n            }\r\n        }\r\n        //logger.debug('8888' + retval.toString());\r\n        return retval.toString();\r\n    }\r\n\r\n    static LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar) {\r\n        let code = curChar.charCodeAt();\r\n        //logger.debug('LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar)');\r\n        var res = \"Lexical error at line \" +\r\n            errorLine + \", column \" +\r\n            errorColumn + \".  Encountered: \" +\r\n            (EOFSeen ? \"<EOF> \" : (\"\\\"\" + RJsonTokenMgrError.addEscapes(curChar) + \"\\\"\") + \" (\" + code + \"), \") +\r\n            \"after : \\\"\" + RJsonTokenMgrError.addEscapes(errorAfter) + \"\\\"\";\r\n        //logger.debug(res);\r\n    }\r\n\r\n    constructor(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar, reason) {\r\n        this.message = RJsonTokenMgrError.LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar);\r\n        this.reason = reason;\r\n    }\r\n}"],"sourceRoot":""}