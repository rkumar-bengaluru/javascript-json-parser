{"version":3,"sources":["webpack://RJsonParser/webpack/universalModuleDefinition","webpack://RJsonParser/./src/app.js","webpack://RJsonParser/./src/io/CharStream.js","webpack://RJsonParser/./src/io/Reader.js","webpack://RJsonParser/./src/io/String.js","webpack://RJsonParser/./src/io/StringReader.js","webpack://RJsonParser/./src/json/JsonBoolean.js","webpack://RJsonParser/./src/json/JsonList.js","webpack://RJsonParser/./src/json/JsonMap.js","webpack://RJsonParser/./src/json/JsonNull.js","webpack://RJsonParser/./src/json/JsonNumber.js","webpack://RJsonParser/./src/json/JsonObject.js","webpack://RJsonParser/./src/json/JsonString.js","webpack://RJsonParser/./src/logger/logger.js","webpack://RJsonParser/./src/parser/RJsonAbsParser.js","webpack://RJsonParser/./src/parser/RJsonConstants.js","webpack://RJsonParser/./src/parser/RJsonLexer.js","webpack://RJsonParser/./src/parser/RJsonParser.js","webpack://RJsonParser/./src/parser/RJsonParserError.js","webpack://RJsonParser/./src/parser/RJsonToken.js","webpack://RJsonParser/./src/parser/RJsonTokenMgrError.js"],"names":["root","factory","exports","module","define","amd","this","example","init","console","log","document","getElementById","classList","toggle","target","instance","value","jsonObj","parse","appendable","destination","formatJsonToString","formatInputString","formatJsonToHtml","innerHTML","formatHtml","e","stack","JSON","stringify","addEventListener","format","logger","CharStream","stream","maxNextCharInd","nextCharInd","bufline","bufcolumn","column","line","bufpos","bufsize","available","maxBufSize","inBuf","prevCharIsCR","prevCharIsLF","tabSize","tokenBegin","nextCharBuf","Array","buffer","inputStream","readFromBuffer","readChar","c","adjustBuffSize","readByte","checkSpecial","updateLineColumn","fillBuff","debug","i","read","close","Error","backup","olumn","amount","expandBuff","response","toString","Reader","newInput","constructor","TypeError","prototype","getChars","input","length","next","mark","cbuf","offset","len","srcBegin","srcEnd","dst","dstBegin","String","chars","count","join","StringReader","super","ensureOpen","n","Math","min","JsonBoolean","isKey","currentLevel","_input","JsonList","jsonObject","push","j","tabs","size","forEach","element","cAppendable","_root","JsonMap","jsonObjectKey","jsonObjectValue","set","info","key","keyAppendable","valueAppendable","keyValue","JsonNumber","JsonObject","_isKey","_keyValue","_rawInput","newRoot","newKey","raw","newValue","JsonString","removeSpecialChars","tmp","r","concat","msg","RJsonAbsParser","rinput","startNow","undefined","reader","lexer","token","jj_nt","getNextToken","jj_gen","jj_la1","jj_la1_0","jj_kind","nativeNumbers","o","kind","STRING_SINGLE_EMPTY","STRING_DOUBLE_EMPTY","STRING_SINGLE_NONEMPTY","STRING_DOUBLE_NONEMPTY","string","SYMBOL","symbol","NULL","nullValue","NUMBER_INTEGER","NUMBER_DECIMAL","TRUE","FALSE","booleanValue","number","jj_consume_token","s","doubleQuoteString","singleQuoteString","image","sjj_gen","b","x","t","RJsonConstants","EOF","C_SINGLE_COMMENT","C_MULTILINE_COMMENT","SH_SINGLE_COMMENT","WHITESPACE","EOL","COMMA","BRACE_OPEN","BRACE_CLOSE","COLON","BRACKET_OPEN","BRACKET_CLOSE","ZERO","DIGIT_NONZERO","DIGIT","QUOTE_DOUBLE","QUOTE_SINGLE","STRING_SINGLE_BODY","STRING_DOUBLE_BODY","DEFAULT","LEXICAL_ERROR","tokenImage","RJsonLexer","istream","input_stream","curChar","matchedKind","matchedPos","toToken","curLexState","strLiteralImages","matchedToken","curPos","EOFLoop","beginToken","fillToken","analyzeCurrentCharacter","error_line","getEndLine","error_column","getEndColumn","error_after","EOFSeen","e1","getImage","consume_char","charCodeAt","stopAtPos","moveChar01","moveChar","findNumber","code","startState","isDigit","active0","moveChar02","findStringLiteral","old0","moveChar03","moveChar04","pos","checkForSpace","beginLine","getBeginLine","beginColumn","getBeginColumn","endLine","endColumn","im","spaceDetected","RJsonParser","toReturn","anything","rawInput","ensureEOF","object","list","map","Map","objectKey","put","label_1","add","label_2","oldToken","generateParseException","k","l","jj_expentries","la1tokens","jj_expentry","exptokseq","getMessage","runParser","RJsonParserError","_currentTokenVal","_expectedTokenSequencesVal","_tokenImageVal","name","currentToken","expectedTokenSequences","eol","maxSize","expected","retval","tok","add_escapes","message","str","ch","charAt","substring","RJsonToken","ofkind","nimage","_kind","_image","_next","specialToken","newNext","_beginLine","_endLine","_beginColumn","_endColumn","newKind","RJsonTokenMgrError","lexState","errorLine","errorColumn","errorAfter","addEscapes","reason","LexicalError"],"mappings":"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","file":"app.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RJsonParser\"] = factory();\n\telse\n\t\troot[\"RJsonParser\"] = factory();\n})(this, function() {\nreturn ","import RJsonParser from \"./parser/RJsonParser\"\r\n\r\nimport css from \"./css/style.css\";\r\n\r\nvar example = {\"name\":\"sonoo\",\"salary\":600000.0,\"age\":27};\r\n\r\nformat();\r\n\r\nfunction formatInputString(jsonObj) {\r\n    var appendable = {\r\n        destination: \"\"\r\n    }\r\n    jsonObj.formatJsonToString(appendable, -1);\r\n    console.log(appendable.destination);\r\n    document.getElementById('inputtextarea').value = appendable.destination;\r\n}\r\n\r\nfunction formatHtml(jsonObj) {\r\n    var appendable = {\r\n        destination: \"\"\r\n    }\r\n    jsonObj.formatJsonToHtml(appendable, -1);\r\n    console.log(appendable.destination);\r\n    document.getElementById('json').innerHTML = appendable.destination;\r\n}\r\n\r\nfunction init() {\r\n    try {\r\n        console.log('reformatting.');\r\n        document.getElementById(\"input-spinner\").classList.toggle(\"hidden\");\r\n        var target = document.getElementById('inputtextarea');\r\n        let instance = new RJsonParser(target.value);\r\n        target.value = 'loading';\r\n        \r\n        var jsonObj = instance.parse();\r\n        formatInputString(jsonObj);\r\n        formatHtml(jsonObj);\r\n        document.getElementById(\"input-spinner\").classList.toggle(\"hidden\");\r\n    } catch (e) {\r\n        console.log(e.stack);\r\n        //document.getElementById('inputtextarea').innerHTML = e.message;\r\n    }\r\n}\r\n\r\nfunction format() {\r\n    try {\r\n        var target = document.getElementById('inputtextarea');\r\n        target.value = JSON.stringify(example);\r\n        init();\r\n        document.getElementById('loadjson').addEventListener('click', () => {\r\n            console.log('load json...' + document.getElementById('inputtextarea').value);\r\n            //alert('-----------' + document.getElementById('inputtextarea').innerHTML);\r\n            init();\r\n        })\r\n    } catch (e) {\r\n        console.log(e.stack);\r\n        //document.getElementById('inputtextarea').innerHTML = e.message;\r\n    }\r\n}\r\n\r\n\r\n","import String from '../io/String.js';\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class CharStream {\r\n    maxBufSize = 4096;\r\n\r\n    constructor(stream) {\r\n        this.maxNextCharInd = 0;\r\n        this.nextCharInd = -1;\r\n\r\n        this.bufline = [];\r\n        this.bufcolumn = [];\r\n        this.column = 0;\r\n        this.line = 1;\r\n\r\n        this.bufpos = -1;\r\n        this.bufsize = 0;\r\n        this.available = this.maxBufSize;\r\n        this.inBuf = 0;\r\n\r\n        this.prevCharIsCR = false;\r\n        this.prevCharIsLF = false;\r\n        this.tabSize = 4;\r\n\r\n        this.tokenBegin = 0;\r\n        this.nextCharBuf = new Array(this.maxBufSize);\r\n        this.buffer = [];\r\n        this.inputStream = stream;\r\n    }\r\n\r\n    beginToken() {\r\n        if (this.inBuf > 0) {\r\n            // lookahead and backup has happened.\r\n            return this.readFromBuffer();\r\n        }\r\n        this.tokenBegin = 0;\r\n        this.bufpos = -1;\r\n        return this.readChar();\r\n    }\r\n\r\n    readChar() {\r\n        if (this.inBuf > 0) {\r\n            // lookahead and backup has happened.\r\n            return this.readFromBuffer();\r\n        }\r\n        if (++this.bufpos === this.available)\r\n            this.adjustBuffSize();\r\n\r\n        let c;\r\n        if ((this.buffer[this.bufpos] = c = this.readByte()) == '\\\\') {\r\n            return this.checkSpecial(c);\r\n        } else {\r\n            this.updateLineColumn(c);\r\n            return c;\r\n        }\r\n    }\r\n\r\n    readByte() {\r\n        \r\n        if (++this.nextCharInd >= this.maxNextCharInd)\r\n            this.fillBuff();\r\n        logger.debug(\"nextCharInd=\" + (this.nextCharInd) + \",this.maxNextCharInd=\" + this.maxNextCharInd);\r\n        return this.nextCharBuf[this.nextCharInd];\r\n    }\r\n\r\n    fillBuff() {\r\n        let i;\r\n        if (this.maxNextCharInd === this.maxBufSize)\r\n            this.maxNextCharInd = this.nextCharInd = 0;\r\n        try {\r\n            if ((i = this.inputStream.read(this.nextCharBuf, this.maxNextCharInd, this.maxBufSize - this.maxNextCharInd)) === -1) {\r\n                this.inputStream.close();\r\n                throw new Error(\"stream has not enough data.\");\r\n            } else {\r\n                this.maxNextCharInd += i;\r\n            }\r\n        } catch (e) {\r\n            if (this.bufpos != 0) {\r\n                --this.bufpos;\r\n                this.backup(0);\r\n            } else {\r\n                this.bufline[this.bufpos] = this.line;\r\n                this.bufcolumn[this.bufpos] = this.olumn;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    backup(amount) {\r\n        //logger.debug('inBuf-' + this.inBuf + \",bufPos-\" + this.bufpos);\r\n        this.inBuf += amount;\r\n        if ((this.bufpos -= amount) < 0)\r\n            this.bufpos += this.bufsize;\r\n        //this.tokenBegin = amount;\r\n        //logger.debug('inBuf-' + this.inBuf + \",bufPos-\" + this.bufpos);\r\n    }\r\n\r\n    readFromBuffer() {\r\n        //logger.debug('reading from inBuf-' + this.inBuf);\r\n        --this.inBuf;\r\n        if (++this.bufpos == this.bufsize)\r\n            this.bufpos = 0;\r\n        return this.buffer[this.bufpos];\r\n    }\r\n\r\n    adjustBuffSize() {\r\n        if (this.available === this.bufsize) {\r\n            if (this.tokenBegin > 2048) {\r\n                this.bufpos = 0;\r\n            } else {\r\n                this.expandBuff(true);\r\n            }\r\n        } else if (this.available > this.tokenBegin) {\r\n            this.available = this.bufsize;\r\n        } else if ((this.tokenBegin - this.available) < 2048) {\r\n            this.expandBuff(true);\r\n        } else {\r\n            this.available = this.tokenBegin;\r\n        }\r\n    }\r\n\r\n    expandBuff() {\r\n        throw new Error(\"Implementation to be done....\");\r\n    }\r\n\r\n    checkSpecial(c) {\r\n        throw new Error(\"Implementation to be done....\");\r\n    }\r\n\r\n    updateLineColumn(c) {\r\n        this.column++;\r\n        if (this.prevCharIsLF) {\r\n            this.prevCharIsLF = false;\r\n            this.line += (this.column = 1);\r\n        } else if (this.prevCharIsCR) {\r\n            this.prevCharIsCR = false;\r\n            if (c == '\\n') {\r\n                this.prevCharIsLF = true;\r\n            } else {\r\n                this.line += (this.column = 1);\r\n            }\r\n        }\r\n\r\n        switch (c) {\r\n            case '\\r':\r\n                //this.tokenBegin++;\r\n                this.prevCharIsCR = true;\r\n                break;\r\n            case '\\n':\r\n                //this.tokenBegin++;\r\n                this.prevCharIsLF = true;\r\n                break;\r\n            case '\\t':\r\n                //this.tokenBegin++;\r\n                this.column--;\r\n                this.column += (this.tabSize - (this.column % this.tabSize));\r\n                break;\r\n            case 32:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.bufline[this.bufpos] = this.line;\r\n        this.bufcolumn[this.bufpos] = this.column;\r\n    }\r\n\r\n    spaceDetected() {\r\n        this.tokenBegin++;\r\n    }\r\n\r\n    getImage() {\r\n        var response;\r\n        logger.debug(\"bufpos=\" + this.bufpos + \",tokenBegin=\" + this.tokenBegin);\r\n        logger.debug(\"buffer=\" + this.buffer[0] + \",\" + this.buffer[1] );\r\n        if (this.bufpos >= this.tokenBegin) {\r\n            response = new String(this.buffer, this.tokenBegin, this.bufpos - this.tokenBegin + 1);\r\n            logger.debug(\"response=\" + response.toString());\r\n        } else {\r\n            response = new String(this.buffer, this.tokenBegin, this.bufsize - this.tokenBegin).toString() + new String(this.buffer, 0, this.bufpos + 1).toString();\r\n            logger.debug(\"response=\" + response.toString());\r\n        }\r\n        return response.stringify();\r\n    }\r\n\r\n    get getColumn() {\r\n        return this.bufcolumn[this.bufpos];\r\n    }\r\n\r\n    get getLine() {\r\n        return this.bufline[this.bufpos];\r\n    }\r\n\r\n    get getEndLine() {\r\n        return this.bufline[this.bufpos];\r\n    }\r\n\r\n    get getBeginColumn() {\r\n        return this.bufcolumn[this.tokenBegin];\r\n    }\r\n\r\n    get getBeginLine() {\r\n        return this.bufline[this.tokenBegin];\r\n    }\r\n}","export default class Reader {\r\n\r\n    constructor(newInput) {\r\n        if (this.constructor === Reader) {\r\n            throw new TypeError(\"Can not construct abstract class.\");\r\n        }\r\n\r\n        if (this.read === Reader.prototype.read) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract method read.\");\r\n        }\r\n\r\n        if (this.getChars === Reader.prototype.getChars) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract method getChars.\");\r\n        }\r\n\r\n        if (this.close === Reader.prototype.close) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract close getChars.\");\r\n        }\r\n        \r\n        this.input = newInput;\r\n        this.length = this.input.length;\r\n        this.next = 0;\r\n        this.mark = 0;\r\n    }\r\n\r\n    read(cbuf, offset, len) {\r\n        throw new TypeError(\"Do not call abstract method read from child.\");\r\n    }\r\n\r\n    getChars(srcBegin, srcEnd, dst, dstBegin) {\r\n        throw new TypeError(\"Do not call abstract method getChars from child.\");\r\n    }\r\n\r\n    close() {\r\n        throw new TypeError(\"Do not call abstract method close from child.\");\r\n    }\r\n\r\n    ensureOpen() {\r\n        if (this.input === null)\r\n            throw new Error('Stream closed');\r\n    }\r\n}","export default class String {\r\n\r\n    constructor(chars, offset, count) {\r\n        if (offset < 0)\r\n            throw new Error('Offset cannot be negative');\r\n        if (count < 0)\r\n            throw new Error('count cannot be negative');\r\n\r\n        let i;\r\n        this.value = [];\r\n        for (i = offset; i < (offset + count); i++) {\r\n            //this.value.push(chars[i]);\r\n            if(chars[i] != '\\\"')\r\n                this.value[i] = chars[i];\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        return this.value.join(\"\");\r\n    }\r\n\r\n    stringify() {\r\n        return this.value.join(\"\");\r\n    }\r\n}\r\n","import Reader from './Reader.js';\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class StringReader extends Reader {\r\n\r\n    constructor(newInput) {\r\n        super(newInput);\r\n    }\r\n    /*\r\n     * Reads characters into a portion of an array. This method will block until some input is \r\n     * available, an I/O error occurs, or the end of the stream is reached.\r\n     * \r\n     * return The number of characters read, or -1 if the end of the stream has been reached\r\n     */\r\n    read(cbuf, offset, len) {\r\n        this.ensureOpen();\r\n        if ((offset < 0) || (offset > cbuf.length) || (len < 0) ||\r\n            ((offset + len) > cbuf.length) || ((offset + len) < 0)) {\r\n            throw new Error('index out of bounds.');\r\n        } else if (len == 0) {\r\n            return 0;\r\n        }\r\n        if (this.next >= this.length)\r\n            return -1;\r\n        var n = Math.min(this.length - this.next, len);\r\n        this.getChars(this.next, this.next + n, cbuf, offset);\r\n        this.next += n;\r\n        return n;\r\n    }\r\n\r\n    getChars(srcBegin, srcEnd, dst, dstBegin) {\r\n        if (srcBegin < 0) {\r\n            new Error('index out of bounds - ' + srcBegin);\r\n        }\r\n        if (srcEnd > this.input.length) {\r\n            new Error('index out of bounds - ' + srcEnd);\r\n        }   \r\n        if (srcBegin > srcEnd) {\r\n            throw new Error('index out of bounds - ' + (srcEnd - srcBegin));\r\n        }\r\n        var i;\r\n        for(i = srcBegin; i <= srcEnd; i++) {\r\n            dst[dstBegin] = this.input[i];\r\n            dstBegin++;\r\n        }\r\n    }\r\n\r\n    close() {\r\n        this.input = null;\r\n    }\r\n}","\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonBoolean extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        //console.log('destination->' + destination);\r\n        if(this._input)\r\n            appendable.destination = true;\r\n        else \r\n            appendable.destination = false;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        destination += \"<span class=\\\"type-boolean\\\">\";\r\n        destination += this._input + \"</span>\";\r\n        appendable.destination = destination;\r\n    }\r\n}","\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonList extends JsonObject {\r\n    \r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    add(jsonObject) {\r\n        this._input.push(jsonObject);\r\n        return this;\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        ++currentLevel;\r\n        let tabs = '';\r\n        let i,j;\r\n        for (i = 0; i < currentLevel; i++)\r\n            tabs += \"\\t\";\r\n        let destination = \"\";\r\n        destination += \"\\n\" + tabs + \"[\\n\";\r\n        j = 0;\r\n        let size = this._input.length;\r\n        this._input.forEach(element => {\r\n            var cAppendable = {\r\n                destination : \"\"\r\n            }\r\n            element.formatJsonToString(cAppendable,currentLevel);\r\n            destination += cAppendable.destination;\r\n            if(j != (size-1))\r\n                destination += \",\\n\";\r\n            j++;\r\n        });\r\n        destination += \"\\n\" + tabs + \"]\";\r\n        appendable.destination += destination;\r\n        //console.log('destination->' + destination);\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        if(this._root) {\r\n            destination += \"<div class=\\\"json-viewer\\\"><code class=\\\"js\\\" id=\\\"js\\\">\";\r\n        }\r\n        \r\n        let size = this._input.length;\r\n        destination += \"<a class=\\\"list-link\\\" href=\\\"javascript:void(0)\\\">[\";\r\n        destination += \"<span style=\\\"color: #1d57d4;\\\"><i onClick=\\\"spanClicked(event);\\\" class=\\\"far fa-minus-square\\\"></i></span>\";\r\n        destination += \"<span style=\\\"color: #1d57d4;\\\" class=\\\"hide\\\"><i onClick=\\\"spanClicked(event);\\\" class=\\\"fas fa-plus-square\\\"></i></span>\";\r\n        destination += \"<span class=\\\"hide\\\"><span onClick=\\\"spanClicked(event);\\\" class=\\\"items-ph\\\">\" + size + \" items</span></span>\";\r\n        destination += \"</a>\";\r\n        let j = 0;\r\n        destination += \"<ul data-level=\\\"\" + ++currentLevel + \"\\\" class=\\\"type-array\\\">\";\r\n        this._input.forEach(element => {\r\n           \r\n            destination += \"<li>\";\r\n            var cAppendable = {\r\n                destination : 0\r\n            }\r\n            element.formatJsonToHtml(cAppendable,currentLevel);\r\n            destination += cAppendable.destination;\r\n            if(j != (size-1))\r\n                destination += \"<span class=\\\"type-comma\\\">\" + \",\" + \"</span>\";\r\n            destination += \"</li>\";\r\n            j++;\r\n        });\r\n        destination += \"</ul>\";\r\n        destination += \"<span class=\\\"type-symbol\\\">]</span>\";\r\n        if(this._root) {\r\n            destination += \"</code></div>\";\r\n        }\r\n\r\n        appendable.destination = destination;\r\n    }\r\n}","var logger = require('../logger/logger');\r\n\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonMap extends JsonObject {\r\n    \r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    put(jsonObjectKey,jsonObjectValue) {\r\n        this._input.set(jsonObjectKey, jsonObjectValue);\r\n        logger.debug('map size ->' + this._input.size);\r\n        return this;\r\n    }\r\n    \r\n    formatJsonToString(appendable, currentLevel) {\r\n        ++currentLevel;\r\n        let tabs = '';\r\n        let i,j;\r\n        for (i = 0; i < currentLevel; i++)\r\n            tabs += \"\\t\";\r\n        let destination = \"\";\r\n        destination += \"\" + tabs + \"{\\n\";\r\n        j = 0;\r\n        let size = this._input.size;\r\n        logger.info('size of the map ' + this._input.size);\r\n\r\n        this._input.forEach(function(value, key) {\r\n            var keyAppendable = {\r\n                destination : \"\"\r\n            }\r\n            var valueAppendable = {\r\n                destination : \"\"\r\n            }\r\n         \r\n            key.formatJsonToString(keyAppendable,currentLevel);\r\n            destination += keyAppendable.destination;\r\n            destination += \" : \";\r\n            \r\n            value.keyValue = true;\r\n            value.formatJsonToString(valueAppendable,currentLevel);\r\n            destination += valueAppendable.destination;\r\n            if(j != (size-1))\r\n                destination += \",\\n\";\r\n            j++;  \r\n        });\r\n        destination += \"\\n\" + tabs + \"}\";\r\n        appendable.destination += destination;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        logger.debug('formatting to html...' + this._root);\r\n        if(this._root) {\r\n            destination += \"<div class=\\\"json-viewer\\\"><code class=\\\"js\\\" id=\\\"js\\\">\";\r\n        }\r\n        logger.debug('formatting to html...');\r\n        \r\n        let size = this._input.size;\r\n        destination += \"<a class=\\\"list-link\\\" href=\\\"javascript:void(0)\\\">{\";\r\n        destination += \"<span style=\\\"color: #1d57d4;\\\"><i onClick=\\\"spanClicked(event);\\\" class=\\\"far fa-minus-square\\\"></i></span>\";\r\n        destination += \"<span style=\\\"color: #1d57d4;\\\" class=\\\"hide\\\"><i onClick=\\\"spanClicked(event);\\\" class=\\\"fas fa-plus-square\\\"></i></span>\";\r\n        destination += \"<span class=\\\"hide\\\"><span onClick=\\\"spanClicked(event);\\\" class=\\\"items-ph\\\">\" + size + \" items</span></span>\";\r\n        destination += \"</a>\";\r\n        let j = 0;\r\n        destination += \"<ul data-level=\\\"\" + ++currentLevel + \"\\\" class=\\\"type-array\\\">\";\r\n        this._input.forEach(function(value, key) {\r\n            destination += \"<li>\";\r\n            var keyAppendable = {\r\n                destination : \"\"\r\n            }\r\n            key.formatJsonToHtml(keyAppendable,currentLevel);\r\n            destination += keyAppendable.destination;\r\n            destination += \"<span class=\\\"type-colon\\\">:</span>\";\r\n\t\t\tvar valueAppendable = {\r\n                destination : \"\"\r\n            }\r\n            value.formatJsonToHtml(valueAppendable,currentLevel);\r\n            destination += valueAppendable.destination;\r\n            logger.debug(\"j value \" + j);\r\n            if(j != (size-1))\r\n                destination += \"<span class=\\\"type-comma\\\">\" + \",\" + \"</span>\";\r\n            destination += \"</li>\";\r\n            j++;  \r\n        });\r\n        destination += \"</ul>\";\r\n        destination += \"<span class=\\\"type-symbol\\\">}</span>\";\r\n        if(this._root) {\r\n            destination += \"</code></div>\";\r\n        }\r\n\r\n        appendable.destination = destination;\r\n    }\r\n}","\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonBoolean extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        //console.log('destination->' + destination);\r\n        appendable.destination = null;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        destination += \"<span class=\\\"type-null\\\">\";\r\n        destination += this._input + \"</span>\";\r\n        appendable.destination = destination;\r\n    }\r\n}","\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonNumber extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        //console.log('destination->' + destination);\r\n        appendable.destination += this._input;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        destination += \"<span class=\\\"type-number\\\">\";\r\n        destination += this._input + \"</span>\";\r\n        appendable.destination = destination;\r\n    }\r\n}","export default class JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        // if (this.constructor === JsonObject) {\r\n        //     throw new TypeError(\"Can not construct abstract class.\");\r\n        // }\r\n\r\n        if (this.formatJsonToString === JsonObject.prototype.formatJsonToString) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract method formatJsonToString.\");\r\n        }\r\n\r\n        if (this.formatJsonToHtml === JsonObject.prototype.formatJsonToHtml) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract method formatJsonToHtml.\");\r\n        }\r\n        this._root = root;\r\n        this._isKey = isKey;\r\n        this._input = input;\r\n        this._keyValue = false;\r\n        this._rawInput = '';\r\n    }\r\n\r\n    get root() {\r\n        return this._root;\r\n    }\r\n\r\n    set root(newRoot) {\r\n        this._root = newRoot;\r\n    }\r\n\r\n    get isKey() {\r\n        return this._isKey;\r\n    }\r\n\r\n    set isKey(newKey) {\r\n        this._isKey = newKey;\r\n    }\r\n\r\n    get input() {\r\n        return this._input;\r\n    }\r\n\r\n    set input(newInput) {\r\n        this._input = newInput;\r\n    }\r\n\r\n    get rawInput() {\r\n        return this._rawInput;\r\n    }\r\n\r\n    set rawInput(raw) {\r\n        this._rawInput = raw;\r\n    }\r\n\r\n    set keyValue(newValue) {\r\n        this._keyValue = newValue;\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        throw new TypeError(\"Do not call abstract method toString from child.\");\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        throw new TypeError(\"Do not call abstract method toHtml from child.\");\r\n    }\r\n}","import JsonObject from './JsonObject.js';\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class JsonString extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n        this.removeSpecialChars();\r\n    }\r\n\r\n    removeSpecialChars() {\r\n        var tmp = this._input;\r\n        var i = 0;\r\n        var r = [];\r\n        for(i=0;i<tmp.length;i++) {\r\n            if(tmp[i] != '\\r' && tmp[i] != '\\t' && tmp[i] != '\\n' ) {\r\n                r.push(tmp[i]);\r\n            }\r\n        }\r\n\r\n        this._input = r.join(\"\");\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        ++currentLevel;\r\n        let destination = \"\";\r\n        let tabs = '';\r\n        let i;\r\n        for (i = 0; i < currentLevel; i++)\r\n            tabs = tabs.concat(\"\\t\");\r\n        logger.debug('appendable->' + appendable);\r\n        if (this._isKey) {\r\n            destination += tabs + \"\\\"\" + this._input + \"\\\"\";\r\n        } else if (this._keyValue) {    \r\n            destination += \"\\\"\" + this._input + \"\\\"\";\r\n        } else {\r\n            destination += tabs + \"\\\"\" + this._input + \"\\\"\";\r\n        }\r\n        logger.debug('destination->' + destination);\r\n        appendable.destination = destination;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        if (this._isKey) {\r\n            destination += \"<span class=\\\"type-key\\\">\\\"\";\r\n        } else {\r\n            destination += \"<span class=\\\"type-string\\\">\\\"\";\r\n        }\r\n        destination += this._input + \"\\\"</span>\";\r\n        appendable.destination = destination;\r\n    }\r\n}","module.exports.debug = (msg) => {\r\n    //console.log(msg);\r\n}\r\nmodule.exports.info = (msg) => {\r\n    //console.log(msg);\r\n}\r\n\r\n// var appRoot = require('app-root-path');\r\n// var winston = require('winston');\r\n\r\n// const logFormat = winston.format.combine(\r\n// \t\t winston.format.colorize(),\r\n// \t\t winston.format.timestamp(),\r\n// \t\t winston.format.align(),\r\n// \t\t winston.format.printf(\r\n// \t\t  info => `${info.timestamp} ${info.level}: ${info.message}`,\r\n// \t\t),);\r\n\r\n// // define the custom settings for each transport (file, console)\r\n// var options = {\r\n//   console: {\r\n//     level: 'debug',\r\n//     handleExceptions: true,\r\n//     json: false,\r\n//     colorize: true\r\n//   }\r\n// };\r\n\r\n// // instantiate a new Winston Logger with the settings defined above\r\n// let logger = winston.createLogger({\r\n// \t  format: logFormat,\r\n// \t  transports: [\r\n// \t    new (winston.transports.Console)(options.console)\r\n// \t  ],\r\n// \t  exitOnError: false, // do not exit on handled exceptions\r\n// \t});\r\n\r\n// // create a stream object with a 'write' function that will be used by `morgan`\r\n// logger.stream = {\r\n//   write: function(message, encoding) {\r\n//     // use the 'info' log level so the output will be picked up by both transports (file and console)\r\n//     logger.info(message);\r\n//   },\r\n// };\r\n\r\n// module.exports = logger;","import JsonString from \"../json/JsonString\";\r\nimport JsonBoolean from \"../json/JsonBoolean\";\r\nimport JsonNumber from \"../json/JsonNumber\";\r\nimport JsonNull from \"../json/JsonNull\";\r\nimport RJsonConstants from \"./RJsonConstants\";\r\nimport StringReader from \"../io/StringReader\";\r\nimport CharStream from \"../io/CharStream\";\r\nimport RJsonLexer from \"./RJsonLexer\";\r\nimport RJsonToken from \"./RJsonToken\";\r\n\r\nexport default class RJsonAbsParser extends RJsonConstants {\r\n\r\n    constructor(rinput,startNow) {\r\n        super();\r\n        \r\n        if(startNow === undefined) {\r\n            this.init(rinput);\r\n        }\r\n    }\r\n\r\n    init(rinput) {\r\n        this.input = rinput;\r\n        this.reader = new StringReader(this.input);\r\n        this.stream = new CharStream(this.reader);\r\n        this.lexer = new RJsonLexer(this.stream);\r\n        this.token = new RJsonToken();\r\n        this.token.next = this.jj_nt = this.lexer.getNextToken();\r\n        this.jj_gen = 0;\r\n        this.jj_la1 = new Array(13);\r\n        this.jj_la1_0 = [0xccf8480, 0x78000, 0x1ccf8000, 0x40, 0x1ccf8000, 0x40, 0xccf8480, 0xccf8000, 0x60000, 0x18000, 0xcc00000, 0x8800000, 0x4400000,];;\r\n        var i;\r\n        for (i = 0; i < 13; i++)\r\n            this.jj_la1[i] = -1;\r\n\r\n        this.jj_kind = -1;\r\n        this.nativeNumbers = false;\r\n    }\r\n\r\n    getNextToken() {\r\n        if ((this.token = this.jj_nt).next != null) this.jj_nt = this.jj_nt.next;\r\n        else this.jj_nt = this.jj_nt.next = this.lexer.getNextToken();\r\n        this.jj_gen++;\r\n        return this.token;\r\n    }\r\n\r\n    objectKey() {\r\n        let o, key;\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                key = this.string();\r\n                break;\r\n            case this.SYMBOL:\r\n                key = this.symbol();\r\n                break;\r\n            case this.NULL:\r\n                this.nullValue();\r\n                key = null;\r\n                break;\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n                switch (this.jj_nt.kind) {\r\n                    case this.TRUE:\r\n                    case this.FALSE:\r\n                        o = this.booleanValue();\r\n                        break;\r\n                    case this.NUMBER_INTEGER:\r\n                    case this.NUMBER_DECIMAL:\r\n                        o = this.number();\r\n                        break;\r\n                    default:\r\n                        this.jj_la1[1] = this.jj_gen;\r\n                        this.jj_consume_token(-1);\r\n                        throw new Error();\r\n                }\r\n                key = o;\r\n                break;\r\n            default:\r\n                this.jj_la1[2] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n        { if (true) { key.key = true; return key; } }\r\n    }\r\n\r\n    string() {\r\n        let s;\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                s = this.doubleQuoteString();\r\n                break;\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n                s = this.singleQuoteString();\r\n                break;\r\n            default:\r\n                this.jj_la1[10] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n        { if (true) return s; }\r\n    }\r\n\r\n    doubleQuoteString() {\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_DOUBLE_EMPTY:\r\n                this.jj_consume_token(this.STRING_DOUBLE_EMPTY);\r\n                { if (true) return new JsonString(false, false, \"\"); }\r\n                break;\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                this.jj_consume_token(this.STRING_DOUBLE_NONEMPTY);\r\n                var image = this.token.image;\r\n                { if (true) return new JsonString(false, false, image); }\r\n                break;\r\n            default:\r\n                this.jj_la1[11] = this.sjj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    singleQuoteString() {\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_SINGLE_EMPTY:\r\n                this.jj_consume_token(this.STRING_SINGLE_EMPTY);\r\n                { if (true) return new JsonString(false, false, \"\"); }\r\n                break;\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n                this.jj_consume_token(this.STRING_SINGLE_NONEMPTY);\r\n                var image = token.image;\r\n                { if (true) return new JsonString(false, false, image); }\r\n                break;\r\n            default:\r\n                this.jj_la1[12] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    symbol() {\r\n        this.jj_consume_token(this.SYMBOL);\r\n        { if (true) return new JsonString(false, false, token.image); }\r\n    }\r\n\r\n    nullValue() {\r\n        this.jj_consume_token(this.NULL);\r\n        { if (true) return new JsonNull(); }\r\n    }\r\n\r\n    booleanValue() {\r\n        var b;\r\n        switch (this.jj_nt.kind) {\r\n            case this.TRUE:\r\n                this.jj_consume_token(this.TRUE);\r\n                b = true;\r\n                break;\r\n            case this.FALSE:\r\n                this.jj_consume_token(this.FALSE);\r\n                b = false;\r\n                break;\r\n            default:\r\n                this.jj_la1[8] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n        { if (true) return new JsonBoolean(b); }\r\n    }\r\n\r\n    value() {\r\n        let x;\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                x = this.string();\r\n                break;\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n                x = this.number();\r\n                break;\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n                x = this.booleanValue();\r\n                break;\r\n            case this.NULL:\r\n                x = this.nullValue();\r\n                break;\r\n            default:\r\n                this.jj_la1[7] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n        { if (true) return x; }\r\n    }\r\n\r\n    number() {\r\n        let t;\r\n        switch (this.jj_nt.kind) {\r\n            case this.NUMBER_DECIMAL:\r\n                t = this.jj_consume_token(this.NUMBER_DECIMAL);\r\n                if (nativeNumbers) {\r\n                    { if (true) return new JsonNumber(false, false, t.image); }\r\n                } else {\r\n                    { if (true) return new JsonNumber(false, false, t.image); }\r\n                }\r\n                break;\r\n            case this.NUMBER_INTEGER:\r\n                t = this.jj_consume_token(this.NUMBER_INTEGER);\r\n                if (this.nativeNumbers) {\r\n                    { if (true) return new JsonNumber(false, false, t.image); }\r\n                } else {\r\n                    { if (true) return new JsonNumber(false, false, t.image); }\r\n                }\r\n                break;\r\n            default:\r\n                this.jj_la1[9] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n    }\r\n}","export default class RJsonConstants {\r\n\r\n    constructor() {\r\n        /** End of File. */\r\n        this.EOF = 0;\r\n        /** RegularExpression Id. */\r\n        this.C_SINGLE_COMMENT = 1;\r\n        /** RegularExpression Id. */\r\n        this.C_MULTILINE_COMMENT = 2;\r\n        /** RegularExpression Id. */\r\n        this.SH_SINGLE_COMMENT = 3;\r\n        /** RegularExpression Id. */\r\n        this.WHITESPACE = 4;\r\n        /** RegularExpression Id. */\r\n        this.EOL = 5;\r\n        /** RegularExpression Id. */\r\n        this.COMMA = 6;\r\n        /** RegularExpression Id. */\r\n        this.BRACE_OPEN = 7;\r\n        /** RegularExpression Id. */\r\n        this.BRACE_CLOSE = 8;\r\n        /** RegularExpression Id. */\r\n        this.COLON = 9;\r\n        /** RegularExpression Id. */\r\n        this.BRACKET_OPEN = 10;\r\n        /** RegularExpression Id. */\r\n        this.BRACKET_CLOSE = 11;\r\n        /** RegularExpression Id. */\r\n        this.ZERO = 12;\r\n        /** RegularExpression Id. */\r\n        this.DIGIT_NONZERO = 13;\r\n        /** RegularExpression Id. */\r\n        this.DIGIT = 14;\r\n        /** RegularExpression Id. */\r\n        this.NUMBER_INTEGER = 15;\r\n        /** RegularExpression Id. */\r\n        this.NUMBER_DECIMAL = 16;\r\n        /** RegularExpression Id. */\r\n        this.TRUE = 17;\r\n        /** RegularExpression Id. */\r\n        this.FALSE = 18;\r\n        /** RegularExpression Id. */\r\n        this.NULL = 19;\r\n        /** RegularExpression Id. */\r\n        this.QUOTE_DOUBLE = 20;\r\n        /** RegularExpression Id. */\r\n        this.QUOTE_SINGLE = 21;\r\n        /** RegularExpression Id. */\r\n        this.STRING_SINGLE_EMPTY = 22;\r\n        /** RegularExpression Id. */\r\n        this.STRING_DOUBLE_EMPTY = 23;\r\n        /** RegularExpression Id. */\r\n        this.STRING_SINGLE_BODY = 24;\r\n        /** RegularExpression Id. */\r\n        this.STRING_DOUBLE_BODY = 25;\r\n        /** RegularExpression Id. */\r\n        this.STRING_SINGLE_NONEMPTY = 26;\r\n        /** RegularExpression Id. */\r\n        this.STRING_DOUBLE_NONEMPTY = 27;\r\n        /** RegularExpression Id. */\r\n        this.SYMBOL = 28;\r\n\r\n        /** Lexical state. */\r\n        this.DEFAULT = 0;\r\n\r\n        this.LEXICAL_ERROR = 0;\r\n\r\n        /** Literal token values. */\r\n        this.tokenImage = [\r\n            \"<EOF>\",\r\n            \"<C_SINGLE_COMMENT>\",\r\n            \"<C_MULTILINE_COMMENT>\",\r\n            \"<SH_SINGLE_COMMENT>\",\r\n            \"<WHITESPACE>\",\r\n            \"<EOL>\",\r\n            \"\\\",\\\"\",\r\n            \"\\\"{\\\"\",\r\n            \"\\\"}\\\"\",\r\n            \"\\\":\\\"\",\r\n            \"\\\"[\\\"\",\r\n            \"\\\"]\\\"\",\r\n            \"\\\"0\\\"\",\r\n            \"<DIGIT_NONZERO>\",\r\n            \"<DIGIT>\",\r\n            \"<NUMBER_INTEGER>\",\r\n            \"<NUMBER_DECIMAL>\",\r\n            \"\\\"true\\\"\",\r\n            \"\\\"false\\\"\",\r\n            \"\\\"null\\\"\",\r\n            \"\\\"\\\\\\\"\\\"\",\r\n            \"\\\"\\\\\\'\\\"\",\r\n            \"\\\"\\\\\\'\\\\\\'\\\"\",\r\n            \"\\\"\\\\\\\"\\\\\\\"\\\"\",\r\n            \"<STRING_SINGLE_BODY>\",\r\n            \"<STRING_DOUBLE_BODY>\",\r\n            \"<STRING_SINGLE_NONEMPTY>\",\r\n            \"<STRING_DOUBLE_NONEMPTY>\",\r\n            \"<SYMBOL>\",\r\n        ];\r\n    }\r\n}","import RJsonToken from './RJsonToken.js';\r\nimport RJsonTokenMgrError from './RJsonTokenMgrError.js';\r\nimport RJsonConstants from './RJsonConstants.js';\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class RJsonLexer extends RJsonConstants {\r\n\r\n    constructor(istream) {\r\n        super();\r\n        this.input_stream = istream;\r\n        this.curChar = '';\r\n        this.matchedKind = 0;\r\n        this.matchedPos = 0;\r\n        this.toToken = [0x1ccf8fc1,];\r\n        this.curLexState = 0;\r\n        // this.strLiteralImages = [\r\n        //     \"\", null, null, null, null, 'null', '0o54', 0o173, 0o175, 0o072, 0o133, \r\n        //     0o135, null, null, null, null, null, null, null, null, null, null, \"\\'\", \r\n        //     \"\\\"\", null, null, null, null, null, ];\r\n        this.strLiteralImages = [\r\n            \"\", null, null, null, null, 'null', ',', '{', '}', ':', '[',\r\n            ']', null, null, null, null, null, null, null, null, null, null, \"\\'\",\r\n            \"\\\"\", null, null, null, null, null,];\r\n    }\r\n\r\n    getNextToken() {\r\n        logger.debug(\"getNextToken()\");\r\n        var matchedToken = null;\r\n        var curPos = 0;\r\n        EOFLoop:\r\n        for (; ;) {\r\n            try {\r\n                this.curChar = this.input_stream.beginToken();\r\n            } catch (e) {\r\n                //logger.debug(e.stack);\r\n                this.matchedKind = 0;\r\n                matchedToken = this.fillToken();\r\n                return matchedToken;\r\n            }\r\n            logger.debug(\"this.curChar =\" + this.curChar);\r\n            this.matchedKind = 0x7fffffff;\r\n            this.matchedPos = 0;\r\n            curPos = this.analyzeCurrentCharacter();\r\n            logger.debug(\"matchedKind()->\" + this.matchedKind + \",curPos->\" + curPos);\r\n            if (this.matchedKind != 0x7fffffff) {\r\n               \r\n                if (this.matchedPos + 1 < curPos) {\r\n                    this.input_stream.backup(curPos - this.matchedPos - 1); // possible backtracking.\r\n                }\r\n                logger.debug(\"curPos=\" + curPos);\r\n                if ((this.matchedKind == this.C_SINGLE_COMMENT)\r\n                    || (this.matchedKind == this.C_MULTILINE_COMMENT)) {\r\n                    this.matchedToken = this.fillToken();\r\n                    logger.debug(\"getNextToken()::Matched\" + this.matchedKind);\r\n                    return matchedToken;\r\n                }\r\n                if (this.matchedKind == this.BRACE_OPEN || this.matchedKind == this.TRUE\r\n                    || this.matchedKind == this.NUMBER_INTEGER\r\n                    || this.matchedKind == this.NULL\r\n                    || this.matchedKind == this.COMMA) {\r\n                    matchedToken = this.fillToken();\r\n                    logger.debug(\"getNextToken()::Matched->\" + matchedToken);\r\n                    return matchedToken;\r\n                }\r\n                if ((this.toToken[this.matchedKind >> 6] & (1 << (this.matchedKind & 77))) != 0) {\r\n                    matchedToken = this.fillToken();\r\n                    logger.debug(\"getNextToken()::Matched >> 6->\" + this.matchedKind);\r\n                    return matchedToken;\r\n                } else {\r\n                    continue EOFLoop;\r\n                }\r\n            }\r\n            // error begins.....\r\n            let error_line = this.input_stream.getEndLine;\r\n            let error_column = this.input_stream.getEndColumn;\r\n            let error_after = null;\r\n            let EOFSeen = false;\r\n            try {\r\n                this.input_stream.readChar();\r\n                this.input_stream.backup(1);\r\n            } catch (e1) {\r\n                logger.debug(e1.stack);\r\n                EOFSeen = true;\r\n                error_after = curPos <= 1 ? \"\" : this.input_stream.getImage();\r\n                if (this.curChar == '\\n' || this.curChar == '\\r') {\r\n                    error_line++;\r\n                    error_column = 0;\r\n                } else {\r\n                    error_column++;\r\n                }\r\n            }\r\n            logger.debug('xxxxxxxxxxxx');\r\n            if (!EOFSeen) {\r\n                logger.debug('xxxxxxxxxxxx');\r\n                this.input_stream.backup(1);\r\n                error_after = curPos <= 1 ? \"\" : this.input_stream.getImage();\r\n            }\r\n            logger.debug('zzzzzzzzzzzzzzzz');\r\n            throw new RJsonTokenMgrError(EOFSeen, this.curLexState, error_line, error_column, error_after, this.curChar, this.LEXICAL_ERROR);\r\n        }\r\n    }\r\n\r\n    analyzeCurrentCharacter() {\r\n        if (this.curChar == ' ' || this.curChar == '\\t' || this.curChar == '\\n' || this.curChar == '\\r') {\r\n            this.consume_char();\r\n            try {\r\n                this.curChar = this.input_stream.readChar();\r\n            } catch (e) {\r\n                // hack for special characters after the last token.\r\n                this.matchedKind = 0;\r\n                return 1;\r\n            }\r\n            return this.analyzeCurrentCharacter();\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        //logger.debug('analyzeCurrentCharacter()->' + code);\r\n        switch (code) {\r\n            case 123: // '{'\r\n                return this.stopAtPos(0, this.BRACE_OPEN);\r\n            case 125: // '}'\r\n                return this.stopAtPos(0, this.BRACE_CLOSE);\r\n            case 34: // '\"'\r\n                return this.moveChar01(8);\r\n            case 39: // '\\''\r\n                return this.moveChar01(4);\r\n            case 44: // ','\r\n                return this.stopAtPos(0, this.COMMA);\r\n            case 58: // ':'\r\n                return this.stopAtPos(0, this.COLON);\r\n            case 91: // '['\r\n                return this.stopAtPos(0, this.BRACKET_OPEN);\r\n            case 93: // ']'\r\n                return this.stopAtPos(0, this.BRACKET_CLOSE);\r\n            case 70: // 'F'\r\n            case 102: // 'f'\r\n                return this.moveChar01(4);\r\n            case 78: // 'N'\r\n            case 110: // 'n'\r\n                return this.moveChar01(8);\r\n            case 84: // 'T'\r\n            case 116: // 't'\r\n                return this.moveChar01(2);\r\n            case 47: // '/'\r\n                return this.moveChar01(6);\r\n            case 35: // '#'\r\n                return this.moveChar(0, '\\n');\r\n            default:\r\n                return this.findNumber(0, 0);\r\n        }\r\n    }\r\n\r\n    isDigit() {\r\n        \r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"isDigit-\\\"\" + code + \"\\\"\");\r\n\r\n        if (code == 46) { // '.'\r\n            return true;\r\n        }\r\n\r\n        if (code > 47 && code < 58) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findNumber(startState, curPos) {\r\n        logger.debug(\"findNumber=\\\"\" + this.curChar + \"\\\"\");\r\n        while (this.isDigit()) {\r\n            ++curPos;\r\n            try {\r\n                this.curChar = this.input_stream.readChar();\r\n            } catch (e) {\r\n                return curPos;\r\n            }\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"\\\"\" + code + \"\\\"\");\r\n        if (code == 44 || code == 125\r\n            || this.curChar == '\\r' || this.curChar == '\\n' || this.curChar == ' '\r\n            || this.curChar == '\\t') {\r\n            --curPos;\r\n            logger.debug(\"\\\"\" + code + \"\\\"\");\r\n            this.matchedKind = this.NUMBER_INTEGER;\r\n            this.matchedPos = curPos;\r\n            this.input_stream.backup(1);\r\n            return curPos;\r\n        }\r\n        // not a valid numbers\r\n        return curPos;\r\n    }\r\n\r\n    findStringLiteral(curPos, active0) {\r\n        //logger.debug(\"finding string literal\");\r\n        var kind = 0x7fffffff;\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 1;\r\n        }\r\n        for (; ;) {\r\n            let code = this.curChar.charCodeAt();\r\n            //logger.debug(\"findStringLiteral() = \" + code);\r\n            switch (code) {\r\n                case 34: // '\"'\r\n                    kind = this.STRING_DOUBLE_NONEMPTY;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            ++curPos;\r\n            if (kind != 0x7fffffff) {\r\n                this.matchedKind = kind;\r\n                this.matchedPos = curPos;\r\n                //logger.debug(\"returning curPos = \" + curPos);\r\n                return curPos;\r\n            }\r\n            try {\r\n                this.curChar = this.input_stream.readChar();\r\n            } catch (e) {\r\n                logger.debug(e.stack);\r\n                return curPos;\r\n            }\r\n        }\r\n    }\r\n\r\n    moveChar(curPos, target) {\r\n        logger.debug(\"moveChar::curChar=\" + this.curChar + \",target=\" + target);\r\n        var kind = 0x7fffffff;\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 1;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        for (; ;) {\r\n            if (this.curChar == '\\n' || this.curChar == '\\r' || this.curChar == '\\f') {\r\n                kind = this.C_SINGLE_COMMENT;\r\n            }\r\n            if (code == 42) { // '*'\r\n                \r\n                // lookahead for char '/'\r\n                try {\r\n                    this.curChar = this.input_stream.readChar();\r\n                } catch (e) {\r\n                    return 1;\r\n                }\r\n                let ccode = this.curChar.charCodeAt();\r\n                if (ccode == 47) {\r\n                    ++curPos;\r\n                    kind = this.C_MULTILINE_COMMENT;\r\n                } else {\r\n                    this.input_stream.backup(1);\r\n                }\r\n            }\r\n\r\n            ++curPos;\r\n            if (kind != 0x7fffffff) {\r\n                this.matchedKind = kind;\r\n                this.matchedPos = curPos;\r\n                return curPos;\r\n            }\r\n            try {\r\n                this.curChar = this.input_stream.readChar();\r\n            } catch (e) {\r\n                return curPos;\r\n            }\r\n            code = this.curChar.charCodeAt();\r\n        }\r\n    }\r\n\r\n    moveChar01(active0) {\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 1;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"moveChar01::curChar=\" + this.curChar + \",code=\" + code);\r\n        switch (code) {\r\n            case 34: // '\"'\r\n                if ((active0 & 8) != 0)\r\n                    return this.stopAtPos(1, this.STRING_DOUBLE_EMPTY);\r\n                break;\r\n            case 39: // '\\''\r\n                if ((active0 & 4) != 0)\r\n                    return this.stopAtPos(1, this.STRING_SINGLE_EMPTY);\r\n                break;\r\n            case 65: // 'A'\r\n            case 97: // 'a'\r\n                if ((active0 & 4) != 0)\r\n                    return this.moveChar02(active0, 4);\r\n                break;\r\n            case 82: // 'R'\r\n            case 114: // 'r'\r\n                if ((active0 & 2) != 0)\r\n                    return this.moveChar02(active0, 4);\r\n                break;\r\n            case 85: // 'U'\r\n            case 117: // 'u'\r\n                if ((active0 & 8) != 0)\r\n                    return this.moveChar02(active0, 8);\r\n                break;\r\n            case 47: // '/' - C_SINGLE_COMMENT\r\n                if ((active0 & 6) != 0)\r\n                    return this.moveChar(0, '\\n');\r\n                break;\r\n            case 42: // '*' - C_MULTILINE_COMMENT\r\n                if ((active0 & 6) != 0)\r\n                    return this.moveChar(0, '*');\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n        return this.findStringLiteral(0, active0);\r\n    }\r\n\r\n    moveChar02(old0, active0) {\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 2;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"moveChar02::curChar=\" + this.curChar + \",code=\" + code);\r\n        switch (code) {\r\n            case 76: // L\r\n            case 108:// l\r\n                return this.moveChar03(active0, 5);\r\n            case 85:// U\r\n            case 117:// u\r\n                return this.moveChar03(active0, 2);\r\n            default:\r\n                break;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    moveChar03(old0, active0) {\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 3;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"moveChar03::curChar=\" + this.curChar + \",code=\" + code);\r\n        switch (code) {\r\n            case 69: // E\r\n            case 101: // e\r\n                if ((active0 & 2) != 0)\r\n                    return this.stopAtPos(3, this.TRUE);\r\n                break;\r\n            case 76: // L\r\n            case 108:// l\r\n                \r\n                if ((active0 & 5) != 0) {\r\n                    logger.debug('moveChar03->foundNull-' + (active0 & 5));\r\n                    return this.stopAtPos(3, this.NULL);\r\n                }\r\n                break;\r\n            case 83: // S\r\n            case 115:// s\r\n                return this.moveChar04(active0, 4);\r\n            default:\r\n                break;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    moveChar04(old0, active0) {\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 4;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"moveChar04::curChar=\" + this.curChar + \",code=\" + code);\r\n        switch (code) {\r\n            case 69: // E\r\n            case 101:// e\r\n                if ((active0 & 4) != 0)\r\n                    return this.stopAtPos(4, this.FALSE);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    stopAtPos(pos, kind) {\r\n        this.matchedKind = kind;\r\n        this.matchedPos = pos;\r\n        return pos + 1;\r\n    }\r\n\r\n    checkForSpace() {\r\n        let code = this.curChar.charCodeAt();\r\n        if (code == 32) {\r\n            try {\r\n                curChar = input_stream.readChar();\r\n            } catch (e) {\r\n            }\r\n            let ccode = this.curChar.charCodeAt();\r\n            if (ccode != 32) {\r\n                input_stream.backup(1);\r\n                return;\r\n            } else {\r\n                this.checkForSpace();\r\n            }\r\n        }\r\n    }\r\n\r\n    fillToken() {\r\n        let beginLine = this.input_stream.getBeginLine;\r\n        let beginColumn = this.input_stream.getBeginColumn;\r\n        let endLine = this.input_stream.getEndLine;\r\n        let endColumn = this.input_stream.getEndColumn;\r\n        var im = this.strLiteralImages[this.matchedKind];\r\n        let tokenImage = (im == null) ? this.input_stream.getImage() : im;\r\n        //let tokenImage = this.input_stream.getImage();\r\n        let token = RJsonToken.newToken(this.matchedKind, tokenImage);\r\n        logger.debug('generated new token ->' + token.toString());\r\n        token.beginLine = beginLine;\r\n        token.endLine = endLine;\r\n        token.beginColumn = beginColumn;\r\n        token.endColumn = endColumn;\r\n        return token;\r\n    }\r\n\r\n    consume_char() {\r\n        if (this.curChar == '\\n') {\r\n        } else if (this.curChar == ' ') {\r\n            this.input_stream.spaceDetected();\r\n        }\r\n\r\n    }\r\n}\r\n","import JsonMap from \"../json/JsonMap\";\r\nimport JsonList from \"../json/JsonList\";\r\nimport RJsonAbsParser from \"./RJsonAbsParser\";\r\nimport RJsonParserError from \"./RJsonParserError\";\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class RJsonParser extends RJsonAbsParser {\r\n\r\n    constructor(rinput,startNow) {\r\n        super(rinput,startNow);\r\n    }\r\n\r\n    parse() {\r\n       \r\n        var toReturn = this.anything();\r\n        toReturn.root = true;\r\n        toReturn.rawInput = this.input;\r\n        if (!this.ensureEOF()) {\r\n            throw new Error(\"parser.expectedEOF\");\r\n        }\r\n        return toReturn;\r\n       \r\n    }\r\n\r\n    anything() {\r\n        logger.debug(\"RJsonParser::anything()\" + this.jj_nt);\r\n        let x;\r\n        switch (this.jj_nt.kind) {\r\n            case this.BRACE_OPEN:\r\n                x = this.object();\r\n                break;\r\n            case this.BRACKET_OPEN:\r\n                x = this.list();\r\n                break;\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n            case this.NULL:\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                x = this.value();\r\n                break;\r\n            default:\r\n                this.jj_la1[0] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new RJsonParserError();\r\n        }\r\n        { if (true) return x; }\r\n    }\r\n\r\n    object() {\r\n        let map = new JsonMap(true, false, new Map());\r\n        let key, value;\r\n        this.jj_consume_token(this.BRACE_OPEN);\r\n        switch (this.jj_nt.kind) {\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n            case this.NULL:\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n            case this.SYMBOL:\r\n                key = this.objectKey();\r\n                this.jj_consume_token(this.COLON);\r\n                value = this.anything();\r\n                value.key = true;\r\n                map.put(key, value);\r\n                key = null; value = null;\r\n                label_1:\r\n                while (true) {\r\n                    switch (this.jj_nt.kind) {\r\n                        case this.COMMA:\r\n                            ;\r\n                            break;\r\n                        default:\r\n                            this.jj_la1[3] = this.jj_gen;\r\n                            break label_1;\r\n                    }\r\n                    this.jj_consume_token(this.COMMA);\r\n                    key = this.objectKey();\r\n                    this.jj_consume_token(this.COLON);\r\n                    value = this.anything();\r\n                    value.key = true;\r\n                    map.put(key, value);\r\n                    key = null; value = null;\r\n                }\r\n                break;\r\n            default:\r\n                this.jj_la1[4] = this.jj_gen;\r\n        }\r\n        this.jj_consume_token(this.BRACE_CLOSE);\r\n        { if (true) return map; }\r\n    }\r\n\r\n    list() {\r\n        let list = new JsonList(true, false, []);\r\n        logger.debug(\"RJsonParser::list()\" + this.jj_nt.toString());\r\n        let value;\r\n        this.jj_consume_token(this.BRACKET_OPEN);\r\n        switch (this.jj_nt.kind) {\r\n            case this.BRACE_OPEN:\r\n            case this.BRACKET_OPEN:\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n            case this.NULL:\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                value = this.anything();\r\n                list.add(value);\r\n                value = null;\r\n                label_2:\r\n                while (true) {\r\n                    switch (this.jj_nt.kind) {\r\n                        case this.COMMA:\r\n                            ;\r\n                            break;\r\n                        default:\r\n                            this.jj_la1[5] = this.jj_gen;\r\n                            break label_2;\r\n                    }\r\n                    this.jj_consume_token(this.COMMA);\r\n                    value = this.anything();\r\n                    list.add(value);\r\n                    value = null;\r\n                }\r\n                break;\r\n            default:\r\n                this.jj_la1[6] = this.jj_gen;\r\n                ;\r\n        }\r\n        this.jj_consume_token(this.BRACKET_CLOSE);\r\n        {if (true) return list;}\r\n    }\r\n\r\n    \r\n\r\n    ensureEOF() {\r\n        this.jj_consume_token(0);\r\n        { if (true) return true; }\r\n    }\r\n\r\n    jj_consume_token(kind) {\r\n      \r\n        logger.debug(\"01-RJsonParser::jj_consume_token::this.jj_nt=\" + this.jj_nt + \",cKind=\" + kind + \",this.jj_nt.next=\" + this.jj_nt.next);\r\n        var oldToken = this.token;\r\n        if ((this.token = this.jj_nt).next != null) {\r\n            this.jj_nt = this.jj_nt.next;\r\n        } else {\r\n            this.jj_nt = this.jj_nt.next = this.lexer.getNextToken();\r\n            logger.debug(\"02-RJsonParser::jj_consume_token::this.jj_nt=\" + this.jj_nt + \",cKind=\" + kind+ \",this.jj_nt.next=\" + this.jj_nt.next);\r\n        }\r\n        \r\n        \r\n        if (this.token.kind === kind) {\r\n            this.jj_gen++;\r\n            return this.token;\r\n        }\r\n        this.jj_nt = this.token;\r\n        this.token = oldToken;\r\n        this.jj_kind = kind;\r\n        //logger.debug('-------------------');\r\n        var parserError = this.generateParseException();\r\n        //logger.debug('-------------------' + e.message);\r\n        throw parserError;\r\n    }\r\n\r\n    generateParseException() {\r\n        logger.debug('generateParseException');\r\n        var jj_expentries = [];\r\n        var la1tokens = [];\r\n        var jj_expentry = [];\r\n        var i, j, k, l;\r\n        if (this.jj_kind >= 0) {\r\n            la1tokens[this.jj_kind] = true;\r\n            this.jj_kind = -1;\r\n        }\r\n        for (i = 0; i < 13; i++) {\r\n            if (this.jj_la1[i] == this.jj_gen) {\r\n                for (j = 0; j < 32; j++) {\r\n                    if ((this.jj_la1_0[i] & (1 << j)) != 0) {\r\n                        la1tokens[j] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (k = 0; k < 29; k++) {\r\n            if (la1tokens[k]) {\r\n                jj_expentry[0] = k;\r\n                jj_expentries.push(jj_expentry);\r\n            }\r\n        }\r\n        var exptokseq = [];\r\n        for (l = 0; l < jj_expentries.size; l++) {\r\n            exptokseq[l] = jj_expentries[l];\r\n        }\r\n        \r\n        var e =  new RJsonParserError(this.token, exptokseq, this.tokenImage);\r\n        logger.debug('generateParseException ::' + e.getMessage());\r\n        return e;\r\n    }\r\n\r\n    static runParser(input) {\r\n        var instance = new RJsonParser(input);\r\n        var jsonObject = instance.parse();\r\n        return jsonObject;\r\n    }\r\n}\r\n\r\nexport function runParser(input) {\r\n    RJsonParser.runParser(input);\r\n}","var logger = require('../logger/logger');\r\n\r\nexport default class RJsonParserError extends Error {\r\n\r\n    constructor(_currentTokenVal, _expectedTokenSequencesVal, _tokenImageVal) {\r\n        super();\r\n        this.name = \"RJsonParserError\"; \r\n        this.currentToken = _currentTokenVal;\r\n        this.expectedTokenSequences = _expectedTokenSequencesVal;\r\n        this.tokenImage = _tokenImageVal;\r\n        this.eol = \"&\";\r\n    }\r\n\r\n    getMessage() {\r\n        let expected = '';\r\n        let maxSize, i, j = 0;\r\n        for (i = 0; i < this.expectedTokenSequences.length; i++) {\r\n            if (maxSize < this.expectedTokenSequences[i].length) {\r\n                maxSize = this.expectedTokenSequences[i].length;\r\n            }\r\n            for (j = 0; j < this.expectedTokenSequences[i].length; j++) {\r\n                expected += this.tokenImage[this.expectedTokenSequences[i][j]] + ' ';\r\n            }\r\n            if (this.expectedTokenSequences[i][this.expectedTokenSequences[i].length - 1] != 0) {\r\n                expected += \"...\";\r\n            }\r\n            expected += eol + \"    \";\r\n        }\r\n\r\n        let retval = \"Encountered \\\"\";\r\n        let tok = this.currentToken.next;\r\n        for (i = 0; i < maxSize; i++) {\r\n            if (i != 0) retval += \" \";\r\n            if (tok.kind == 0) {\r\n                retval += this.tokenImage[0];\r\n                break;\r\n            }\r\n            retval += \" \" + this.tokenImage[tok.kind];\r\n            retval += \" \\\"\";\r\n            retval += this.add_escapes(tok.image);\r\n            retval += \" \\\"\";\r\n            tok = tok.next;\r\n        }\r\n\r\n        retval += \"\\\" at line \" + this.currentToken.next.beginLine + \", column \" + this.currentToken.next;\r\n        retval += \".\" + this.eol;\r\n        if (this.expectedTokenSequences.length == 1) {\r\n            retval += \"Was expecting:\" + this.eol + \"    \";\r\n        } else {\r\n            retval += \"Was expecting one of:\" + this.eol + \"    \";\r\n        }\r\n        retval += expected;\r\n        this.message = retval;\r\n        logger.debug(this.message);\r\n        return retval;\r\n    }\r\n\r\n    addEscapes(str) {\r\n        let i,ch;\r\n        let retval = \"\";\r\n        for (i = 0; i < str.length; i++) {\r\n            switch (str.charAt(i)) {\r\n                case 0:\r\n                    continue;\r\n                case '\\b':\r\n                    retval += \"\\\\b\";\r\n                    continue;\r\n                case '\\t':\r\n                    retval += \"\\\\t\";\r\n                    continue;\r\n                case '\\n':\r\n                    retval += \"\\\\n\";\r\n                    continue;\r\n                case '\\f':\r\n                    retval += \"\\\\f\";\r\n                    continue;\r\n                case '\\r':\r\n                    retval += \"\\\\r\";\r\n                    continue;\r\n                case '\\\"':\r\n                    retval += \"\\\\\\\"\";\r\n                    continue;\r\n                case '\\'':\r\n                    retval += \"\\\\\\'\";\r\n                    continue;\r\n                case '\\\\':\r\n                    retval += \"\\\\\\\\\";\r\n                    continue;\r\n                default:\r\n                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\r\n                        var s = \"0000\" + ch.toString();\r\n                        retval += \"\\\\u\" + s.substring(s.length - 4, s.length);\r\n                    } else {\r\n                        retval += ch;\r\n                    }\r\n                    continue;\r\n            }\r\n        }\r\n        return retval.toString();\r\n    }\r\n}","var logger = require('../logger/logger');\r\n\r\nexport default class RJsonToken {\r\n    constructor(ofkind,nimage) {\r\n        this._kind = ofkind;\r\n        this._image = nimage;\r\n        this._next = null;\r\n        this.specialToken = null;\r\n    }\r\n\r\n    set next(newNext) {\r\n        this._next = newNext;\r\n    }\r\n\r\n    get next() {\r\n        return this._next;\r\n    }\r\n\r\n    set beginLine(line) {\r\n        this._beginLine = line;\r\n    }\r\n\r\n    get beginLine() {\r\n        return this._beginLine;\r\n    }\r\n\r\n    set endLine(line) {\r\n        this._endLine = line;\r\n    }\r\n\r\n    set beginColumn(column) {\r\n        this._beginColumn = column;\r\n    }\r\n\r\n    get beginColumn() {\r\n        return this._beginColumn;\r\n    }\r\n\r\n    set endColumn(column) {\r\n        this._endColumn = column;\r\n    }\r\n\r\n    get kind() {\r\n        return this._kind;\r\n    }\r\n\r\n    set kind(newKind) {\r\n        this._kind = newKind;\r\n    }\r\n\r\n    get image() {\r\n        logger.debug('returning from token image length ->' + this._image.length);\r\n        return this._image;\r\n    }\r\n\r\n    static newToken(kind,image) {\r\n        return new RJsonToken(kind,image);\r\n    }\r\n\r\n    toString() {\r\n     return \"kind=\" + this._kind + \",image=\" + this.image;\r\n    }\r\n}","var logger = require('../logger/logger');\r\n\r\nexport default class RJsonTokenMgrError {\r\n    static addEscapes(str) {\r\n        //logger.debug('addEscapes)' + str);\r\n        let i,ch;\r\n        let retval = \"\";\r\n        for (i = 0; i < str.length; i++) {\r\n            switch (str.charAt(i)) {\r\n                case 0:\r\n                    continue;\r\n                case '\\b':\r\n                    retval += \"\\\\b\";\r\n                    continue;\r\n                case '\\t':\r\n                    retval += \"\\\\t\";\r\n                    continue;\r\n                case '\\n':\r\n                    retval += \"\\\\n\";\r\n                    continue;\r\n                case '\\f':\r\n                    retval += \"\\\\f\";\r\n                    continue;\r\n                case '\\r':\r\n                    retval += \"\\\\r\";\r\n                    continue;\r\n                case '\\\"':\r\n                    retval += \"\\\\\\\"\";\r\n                    continue;\r\n                case '\\'':\r\n                    retval += \"\\\\\\'\";\r\n                    continue;\r\n                case '\\\\':\r\n                    retval += \"\\\\\\\\\";\r\n                    continue;\r\n                default:\r\n                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\r\n                        var s = \"0000\" + ch.toString();\r\n                        retval += \"\\\\u\" + s.substring(s.length - 4, s.length);\r\n                        //logger.debug('retval' + retval);\r\n                    } else {\r\n                        retval += ch;\r\n                    }\r\n                    continue;\r\n            }\r\n        }\r\n        //logger.debug('8888' + retval.toString());\r\n        return retval.toString();\r\n    }\r\n\r\n    static LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar) {\r\n        let code = curChar.charCodeAt();\r\n        //logger.debug('LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar)');\r\n        var res = \"Lexical error at line \" +\r\n            errorLine + \", column \" +\r\n            errorColumn + \".  Encountered: \" +\r\n            (EOFSeen ? \"<EOF> \" : (\"\\\"\" + RJsonTokenMgrError.addEscapes(curChar) + \"\\\"\") + \" (\" + code + \"), \") +\r\n            \"after : \\\"\" + RJsonTokenMgrError.addEscapes(errorAfter) + \"\\\"\";\r\n        //logger.debug(res);\r\n    }\r\n\r\n    constructor(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar, reason) {\r\n        this.message = RJsonTokenMgrError.LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar);\r\n        this.reason = reason;\r\n    }\r\n}"],"sourceRoot":""}