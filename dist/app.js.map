{"version":3,"sources":["webpack://RJsonParser/webpack/universalModuleDefinition","webpack://RJsonParser/./src/app.js","webpack://RJsonParser/./src/io/CharStream.js","webpack://RJsonParser/./src/io/Reader.js","webpack://RJsonParser/./src/io/String.js","webpack://RJsonParser/./src/io/StringReader.js","webpack://RJsonParser/./src/json/JsonBoolean.js","webpack://RJsonParser/./src/json/JsonList.js","webpack://RJsonParser/./src/json/JsonMap.js","webpack://RJsonParser/./src/json/JsonNull.js","webpack://RJsonParser/./src/json/JsonNumber.js","webpack://RJsonParser/./src/json/JsonObject.js","webpack://RJsonParser/./src/json/JsonString.js","webpack://RJsonParser/./src/logger/logger.js","webpack://RJsonParser/./src/parser/RJsonAbsParser.js","webpack://RJsonParser/./src/parser/RJsonConstants.js","webpack://RJsonParser/./src/parser/RJsonLexer.js","webpack://RJsonParser/./src/parser/RJsonParser.js","webpack://RJsonParser/./src/parser/RJsonParserError.js","webpack://RJsonParser/./src/parser/RJsonToken.js","webpack://RJsonParser/./src/parser/RJsonTokenMgrError.js"],"names":["root","factory","exports","module","define","amd","this","instance","document","getElementById","innerHTML","appendable","destination","obj","parse","formatJsonToString","formatJsonToHtml","console","log","e","error","stack","message","logger","CharStream","stream","maxNextCharInd","nextCharInd","bufline","bufcolumn","column","line","bufpos","bufsize","available","maxBufSize","inBuf","prevCharIsCR","prevCharIsLF","tabSize","tokenBegin","nextCharBuf","Array","buffer","inputStream","readFromBuffer","readChar","c","adjustBuffSize","readByte","checkSpecial","updateLineColumn","fillBuff","debug","i","read","close","Error","backup","olumn","amount","expandBuff","toString","stringify","Reader","newInput","constructor","TypeError","prototype","getChars","input","length","next","mark","cbuf","offset","len","srcBegin","srcEnd","dst","dstBegin","String","chars","count","value","join","StringReader","super","ensureOpen","n","Math","min","JsonBoolean","isKey","currentLevel","_input","JsonList","jsonObject","push","j","tabs","size","forEach","element","cAppendable","_root","JsonMap","jsonObjectKey","jsonObjectValue","set","info","key","keyAppendable","valueAppendable","keyValue","JsonNumber","JsonObject","_isKey","_keyValue","_rawInput","newRoot","newKey","raw","newValue","JsonString","concat","msg","RJsonAbsParser","rinput","reader","lexer","token","jj_nt","getNextToken","jj_gen","jj_la1","jj_la1_0","jj_kind","nativeNumbers","o","kind","STRING_SINGLE_EMPTY","STRING_DOUBLE_EMPTY","STRING_SINGLE_NONEMPTY","STRING_DOUBLE_NONEMPTY","string","SYMBOL","symbol","NULL","nullValue","NUMBER_INTEGER","NUMBER_DECIMAL","TRUE","FALSE","booleanValue","number","jj_consume_token","s","doubleQuoteString","singleQuoteString","image","sjj_gen","b","x","t","RJsonConstants","EOF","C_SINGLE_COMMENT","C_MULTILINE_COMMENT","SH_SINGLE_COMMENT","WHITESPACE","EOL","COMMA","BRACE_OPEN","BRACE_CLOSE","COLON","BRACKET_OPEN","BRACKET_CLOSE","ZERO","DIGIT_NONZERO","DIGIT","QUOTE_DOUBLE","QUOTE_SINGLE","STRING_SINGLE_BODY","STRING_DOUBLE_BODY","DEFAULT","LEXICAL_ERROR","tokenImage","RJsonLexer","istream","input_stream","curChar","matchedKind","matchedPos","toToken","curLexState","strLiteralImages","matchedToken","curPos","EOFLoop","beginToken","fillToken","analyzeCurrentCharacter","error_line","getEndLine","error_column","getEndColumn","error_after","EOFSeen","e1","getImage","consume_char","charCodeAt","stopAtPos","moveChar01","moveChar","findNumber","code","startState","isDigit","active0","target","moveChar02","findStringLiteral","old0","moveChar03","moveChar04","pos","checkForSpace","beginLine","getBeginLine","beginColumn","getBeginColumn","endLine","endColumn","im","spaceDetected","RJsonParser","toReturn","anything","rawInput","ensureEOF","object","list","map","Map","objectKey","put","label_1","add","label_2","oldToken","generateParseException","k","l","jj_expentries","la1tokens","jj_expentry","exptokseq","getMessage","runParser","RJsonParserError","_currentTokenVal","_expectedTokenSequencesVal","_tokenImageVal","currentToken","expectedTokenSequences","eol","maxSize","expected","retval","tok","add_escapes","str","ch","charAt","substring","RJsonToken","ofkind","nimage","_kind","_image","_next","specialToken","newNext","_beginLine","_endLine","_beginColumn","_endColumn","newKind","RJsonTokenMgrError","lexState","errorLine","errorColumn","errorAfter","addEscapes","reason","LexicalError"],"mappings":"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","file":"app.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RJsonParser\"] = factory();\n\telse\n\t\troot[\"RJsonParser\"] = factory();\n})(this, function() {\nreturn ","import RJsonParser from \"./parser/RJsonParser\"\r\nimport JsonString from \"./json/JsonString\"\r\nimport css from \"./css/style.css\";\r\n\r\nparse();\r\n\r\nfunction parse() {\r\n    try {\r\n        let instance = new RJsonParser(document.getElementById('inputtextarea').innerHTML);\r\n        var appendable = {\r\n            destination: \"\"\r\n        }\r\n        var obj = instance.parse();\r\n        obj.formatJsonToString(appendable, -1);\r\n        \r\n        \r\n        document.getElementById('inputtextarea').innerHTML = appendable.destination;\r\n        appendable.destination = \"\";\r\n        obj.formatJsonToHtml(appendable, -1);\r\n        console.log(appendable.destination);\r\n        \r\n    } catch (e) {\r\n        console.error(e.stack);\r\n        document.getElementById('inputtextarea').innerHTML = e.message;\r\n    }\r\n}\r\n\r\n","import String from '../io/String.js';\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class CharStream {\r\n    maxBufSize = 4096;\r\n\r\n    constructor(stream) {\r\n        this.maxNextCharInd = 0;\r\n        this.nextCharInd = -1;\r\n\r\n        this.bufline = [];\r\n        this.bufcolumn = [];\r\n        this.column = 0;\r\n        this.line = 1;\r\n\r\n        this.bufpos = -1;\r\n        this.bufsize = 0;\r\n        this.available = this.maxBufSize;\r\n        this.inBuf = 0;\r\n\r\n        this.prevCharIsCR = false;\r\n        this.prevCharIsLF = false;\r\n        this.tabSize = 4;\r\n\r\n        this.tokenBegin = 0;\r\n        this.nextCharBuf = new Array(this.maxBufSize);\r\n        this.buffer = [];\r\n        this.inputStream = stream;\r\n    }\r\n\r\n    beginToken() {\r\n        if (this.inBuf > 0) {\r\n            // lookahead and backup has happened.\r\n            return this.readFromBuffer();\r\n        }\r\n        this.tokenBegin = 0;\r\n        this.bufpos = -1;\r\n        return this.readChar();\r\n    }\r\n\r\n    readChar() {\r\n        if (this.inBuf > 0) {\r\n            // lookahead and backup has happened.\r\n            return this.readFromBuffer();\r\n        }\r\n        if (++this.bufpos === this.available)\r\n            this.adjustBuffSize();\r\n\r\n        let c;\r\n        if ((this.buffer[this.bufpos] = c = this.readByte()) == '\\\\') {\r\n            return this.checkSpecial(c);\r\n        } else {\r\n            this.updateLineColumn(c);\r\n            return c;\r\n        }\r\n    }\r\n\r\n    readByte() {\r\n        \r\n        if (++this.nextCharInd >= this.maxNextCharInd)\r\n            this.fillBuff();\r\n        logger.debug(\"nextCharInd=\" + (this.nextCharInd) + \",this.maxNextCharInd=\" + this.maxNextCharInd);\r\n        return this.nextCharBuf[this.nextCharInd];\r\n    }\r\n\r\n    fillBuff() {\r\n        let i;\r\n        if (this.maxNextCharInd === this.maxBufSize)\r\n            this.maxNextCharInd = this.nextCharInd = 0;\r\n        try {\r\n            if ((i = this.inputStream.read(this.nextCharBuf, this.maxNextCharInd, this.maxBufSize - this.maxNextCharInd)) === -1) {\r\n                this.inputStream.close();\r\n                throw new Error(\"stream has not enough data.\");\r\n            } else {\r\n                this.maxNextCharInd += i;\r\n            }\r\n        } catch (e) {\r\n            if (this.bufpos != 0) {\r\n                --this.bufpos;\r\n                this.backup(0);\r\n            } else {\r\n                this.bufline[this.bufpos] = this.line;\r\n                this.bufcolumn[this.bufpos] = this.olumn;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    backup(amount) {\r\n        //logger.debug('inBuf-' + this.inBuf + \",bufPos-\" + this.bufpos);\r\n        this.inBuf += amount;\r\n        if ((this.bufpos -= amount) < 0)\r\n            this.bufpos += this.bufsize;\r\n        //this.tokenBegin = amount;\r\n        //logger.debug('inBuf-' + this.inBuf + \",bufPos-\" + this.bufpos);\r\n    }\r\n\r\n    readFromBuffer() {\r\n        //logger.debug('reading from inBuf-' + this.inBuf);\r\n        --this.inBuf;\r\n        if (++this.bufpos == this.bufsize)\r\n            this.bufpos = 0;\r\n        return this.buffer[this.bufpos];\r\n    }\r\n\r\n    adjustBuffSize() {\r\n        if (this.available === this.bufsize) {\r\n            if (this.tokenBegin > 2048) {\r\n                this.bufpos = 0;\r\n            } else {\r\n                this.expandBuff(true);\r\n            }\r\n        } else if (this.available > this.tokenBegin) {\r\n            this.available = this.bufsize;\r\n        } else if ((this.tokenBegin - this.available) < 2048) {\r\n            this.expandBuff(true);\r\n        } else {\r\n            this.available = this.tokenBegin;\r\n        }\r\n    }\r\n\r\n    expandBuff() {\r\n        throw new Error(\"Implementation to be done....\");\r\n    }\r\n\r\n    checkSpecial(c) {\r\n        throw new Error(\"Implementation to be done....\");\r\n    }\r\n\r\n    updateLineColumn(c) {\r\n        this.column++;\r\n        if (this.prevCharIsLF) {\r\n            this.prevCharIsLF = false;\r\n            this.line += (this.column = 1);\r\n        } else if (this.prevCharIsCR) {\r\n            this.prevCharIsCR = false;\r\n            if (c == '\\n') {\r\n                this.prevCharIsLF = true;\r\n            } else {\r\n                this.line += (this.column = 1);\r\n            }\r\n        }\r\n\r\n        switch (c) {\r\n            case '\\r':\r\n                this.tokenBegin++;\r\n                this.prevCharIsCR = true;\r\n                break;\r\n            case '\\n':\r\n                this.tokenBegin++;\r\n                this.prevCharIsLF = true;\r\n                break;\r\n            case '\\t':\r\n                this.tokenBegin++;\r\n                this.column--;\r\n                this.column += (this.tabSize - (this.column % this.tabSize));\r\n                break;\r\n            case 32:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.bufline[this.bufpos] = this.line;\r\n        this.bufcolumn[this.bufpos] = this.column;\r\n    }\r\n\r\n    spaceDetected() {\r\n        this.tokenBegin++;\r\n    }\r\n\r\n    getImage() {\r\n        var response;\r\n        //logger.debug(\"bufpos=\" + this.bufpos + \",tokenBegin=\" + this.tokenBegin);\r\n        //logger.debug(\"buffer=\" + this.buffer[0] + \",\" + this.buffer[1] + \",\" + this.buffer[2] + \",\" + this.buffer[3] + \",\" + this.buffer[4]);\r\n        if (this.bufpos >= this.tokenBegin) {\r\n            response = new String(this.buffer, this.tokenBegin, this.bufpos - this.tokenBegin + 1);\r\n            //logger.debug(\"response=\" + response.toString());\r\n        } else {\r\n            response = new String(this.buffer, this.tokenBegin, this.bufsize - this.tokenBegin).toString() + new String(this.buffer, 0, this.bufpos + 1).toString();\r\n            //logger.debug(\"response=\" + response.toString());\r\n        }\r\n        return response.stringify();\r\n    }\r\n\r\n    get getColumn() {\r\n        return this.bufcolumn[this.bufpos];\r\n    }\r\n\r\n    get getLine() {\r\n        return this.bufline[this.bufpos];\r\n    }\r\n\r\n    get getEndLine() {\r\n        return this.bufline[this.bufpos];\r\n    }\r\n\r\n    get getBeginColumn() {\r\n        return this.bufcolumn[this.tokenBegin];\r\n    }\r\n\r\n    get getBeginLine() {\r\n        return this.bufline[this.tokenBegin];\r\n    }\r\n}","export default class Reader {\r\n\r\n    constructor(newInput) {\r\n        if (this.constructor === Reader) {\r\n            throw new TypeError(\"Can not construct abstract class.\");\r\n        }\r\n\r\n        if (this.read === Reader.prototype.read) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract method read.\");\r\n        }\r\n\r\n        if (this.getChars === Reader.prototype.getChars) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract method getChars.\");\r\n        }\r\n\r\n        if (this.close === Reader.prototype.close) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract close getChars.\");\r\n        }\r\n        \r\n        this.input = newInput;\r\n        this.length = this.input.length;\r\n        this.next = 0;\r\n        this.mark = 0;\r\n    }\r\n\r\n    read(cbuf, offset, len) {\r\n        throw new TypeError(\"Do not call abstract method read from child.\");\r\n    }\r\n\r\n    getChars(srcBegin, srcEnd, dst, dstBegin) {\r\n        throw new TypeError(\"Do not call abstract method getChars from child.\");\r\n    }\r\n\r\n    close() {\r\n        throw new TypeError(\"Do not call abstract method close from child.\");\r\n    }\r\n\r\n    ensureOpen() {\r\n        if (this.input === null)\r\n            throw new Error('Stream closed');\r\n    }\r\n}","export default class String {\r\n\r\n    constructor(chars, offset, count) {\r\n        if (offset < 0)\r\n            throw new Error('Offset cannot be negative');\r\n        if (count < 0)\r\n            throw new Error('count cannot be negative');\r\n\r\n        let i;\r\n        this.value = [];\r\n        for (i = offset; i < (offset + count); i++) {\r\n            //this.value.push(chars[i]);\r\n            if(chars[i] != '\\\"')\r\n                this.value[i] = chars[i];\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        return this.value.join(\"\");\r\n    }\r\n\r\n    stringify() {\r\n        return this.value.join(\"\");\r\n    }\r\n}\r\n","import Reader from './Reader.js';\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class StringReader extends Reader {\r\n\r\n    constructor(newInput) {\r\n        super(newInput);\r\n    }\r\n    /*\r\n     * Reads characters into a portion of an array. This method will block until some input is \r\n     * available, an I/O error occurs, or the end of the stream is reached.\r\n     * \r\n     * return The number of characters read, or -1 if the end of the stream has been reached\r\n     */\r\n    read(cbuf, offset, len) {\r\n        this.ensureOpen();\r\n        if ((offset < 0) || (offset > cbuf.length) || (len < 0) ||\r\n            ((offset + len) > cbuf.length) || ((offset + len) < 0)) {\r\n            throw new Error('index out of bounds.');\r\n        } else if (len == 0) {\r\n            return 0;\r\n        }\r\n        if (this.next >= this.length)\r\n            return -1;\r\n        var n = Math.min(this.length - this.next, len);\r\n        this.getChars(this.next, this.next + n, cbuf, offset);\r\n        this.next += n;\r\n        return n;\r\n    }\r\n\r\n    getChars(srcBegin, srcEnd, dst, dstBegin) {\r\n        if (srcBegin < 0) {\r\n            new Error('index out of bounds - ' + srcBegin);\r\n        }\r\n        if (srcEnd > this.input.length) {\r\n            new Error('index out of bounds - ' + srcEnd);\r\n        }   \r\n        if (srcBegin > srcEnd) {\r\n            throw new Error('index out of bounds - ' + (srcEnd - srcBegin));\r\n        }\r\n        var i;\r\n        for(i = srcBegin; i <= srcEnd; i++) {\r\n            dst[dstBegin] = this.input[i];\r\n            dstBegin++;\r\n        }\r\n    }\r\n\r\n    close() {\r\n        this.input = null;\r\n    }\r\n}","\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonBoolean extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        //console.log('destination->' + destination);\r\n        if(this._input)\r\n            appendable.destination = true;\r\n        else \r\n            appendable.destination = false;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        destination += \"<span class=\\\"type-boolean\\\">\";\r\n        destination += this._input + \"</span>\";\r\n        appendable.destination = destination;\r\n    }\r\n}","\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonList extends JsonObject {\r\n    \r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    add(jsonObject) {\r\n        this._input.push(jsonObject);\r\n        return this;\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        ++currentLevel;\r\n        let tabs = '';\r\n        let i,j;\r\n        for (i = 0; i < currentLevel; i++)\r\n            tabs += \"\\t\";\r\n        let destination = \"\";\r\n        destination += \"\\n\" + tabs + \"[\\n\";\r\n        j = 0;\r\n        let size = this._input.length;\r\n        this._input.forEach(element => {\r\n            var cAppendable = {\r\n                destination : \"\"\r\n            }\r\n            element.formatJsonToString(cAppendable,currentLevel);\r\n            destination += cAppendable.destination;\r\n            if(j != (size-1))\r\n                destination += \",\\n\";\r\n            j++;\r\n        });\r\n        destination += \"\\n\" + tabs + \"]\";\r\n        appendable.destination += destination;\r\n        //console.log('destination->' + destination);\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        if(this._root) {\r\n            destination += \"<div class=\\\"json-viewer\\\"><code class=\\\"js\\\" id=\\\"js\\\">\";\r\n        }\r\n        let destination = \"\";\r\n        let size = this._input.length;\r\n        destination += \"<a class=\\\"list-link\\\" href=\\\"javascript:void(0)\\\">[\";\r\n        destination += \"<span style=\\\"color: #1d57d4;\\\"><i onClick=\\\"spanClicked(event);\\\" class=\\\"far fa-minus-square\\\"></i></span>\";\r\n        destination += \"<span style=\\\"color: #1d57d4;\\\" class=\\\"hide\\\"><i onClick=\\\"spanClicked(event);\\\" class=\\\"fas fa-plus-square\\\"></i></span>\";\r\n        destination += \"<span class=\\\"hide\\\"><span onClick=\\\"spanClicked(event);\\\" class=\\\"items-ph\\\">\" + size + \" items</span></span>\";\r\n        destination += \"</a>\";\r\n        let i,j;\r\n        destination += \"<ul data-level=\\\"\" + ++currentLevel + \"\\\" class=\\\"type-array\\\">\";\r\n        this._input.forEach(element => {\r\n            j++;\r\n            destination += \"<li>\";\r\n            var cAppendable = {\r\n                destination : 0\r\n            }\r\n            element.formatJsonToHtml(cAppendable,currentLevel);\r\n            destination += cAppendable.destination;\r\n            if(j != (size-1))\r\n                destination += \"<span class=\\\"type-comma\\\">\" + \",\" + \"</span>\";\r\n            destination += \"</li>\";\r\n        });\r\n        destination += \"</ul>\";\r\n        destination += \"<span class=\\\"type-symbol\\\">]</span>\";\r\n        if(this._root) {\r\n            destination += \"</code></div>\";\r\n        }\r\n\r\n        appendable.destination = destination;\r\n    }\r\n}","var logger = require('../logger/logger');\r\n\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonMap extends JsonObject {\r\n    \r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    put(jsonObjectKey,jsonObjectValue) {\r\n        this._input.set(jsonObjectKey, jsonObjectValue);\r\n        logger.debug('map size ->' + this._input.size);\r\n        return this;\r\n    }\r\n    \r\n    formatJsonToString(appendable, currentLevel) {\r\n        ++currentLevel;\r\n        let tabs = '';\r\n        let i,j;\r\n        for (i = 0; i < currentLevel; i++)\r\n            tabs += \"\\t\";\r\n        let destination = \"\";\r\n        destination += \"\" + tabs + \"{\\n\";\r\n        j = 0;\r\n        let size = this._input.size;\r\n        logger.info('size of the map ' + this._input.size);\r\n\r\n        this._input.forEach(function(value, key) {\r\n            var keyAppendable = {\r\n                destination : \"\"\r\n            }\r\n            var valueAppendable = {\r\n                destination : \"\"\r\n            }\r\n         \r\n            key.formatJsonToString(keyAppendable,currentLevel);\r\n            destination += keyAppendable.destination;\r\n            destination += \" : \";\r\n            \r\n            value.keyValue = true;\r\n            value.formatJsonToString(valueAppendable,currentLevel);\r\n            destination += valueAppendable.destination;\r\n            if(j != (size-1))\r\n                destination += \",\\n\";\r\n            j++;  \r\n        });\r\n        destination += \"\\n\" + tabs + \"}\";\r\n        appendable.destination += destination;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        if(this._root) {\r\n            destination += \"<div class=\\\"json-viewer\\\"><code class=\\\"js\\\" id=\\\"js\\\">\";\r\n        }\r\n        let destination = \"\";\r\n        let size = this._input.size;\r\n        destination += \"<a class=\\\"list-link\\\" href=\\\"javascript:void(0)\\\">{\";\r\n        destination += \"<span style=\\\"color: #1d57d4;\\\"><i onClick=\\\"spanClicked(event);\\\" class=\\\"far fa-minus-square\\\"></i></span>\";\r\n        destination += \"<span style=\\\"color: #1d57d4;\\\" class=\\\"hide\\\"><i onClick=\\\"spanClicked(event);\\\" class=\\\"fas fa-plus-square\\\"></i></span>\";\r\n        destination += \"<span class=\\\"hide\\\"><span onClick=\\\"spanClicked(event);\\\" class=\\\"items-ph\\\">\" + size + \" items</span></span>\";\r\n        destination += \"</a>\";\r\n        let i,j;\r\n        destination += \"<ul data-level=\\\"\" + ++currentLevel + \"\\\" class=\\\"type-array\\\">\";\r\n        this._input.forEach(function(value, key) {\r\n            destination += \"<li>\";\r\n            var keyAppendable = {\r\n                destination : \"\"\r\n            }\r\n            key.formatJsonToHtml(keyAppendable,currentLevel);\r\n            destination += keyAppendable.destination;\r\n            destination += \"<span class=\\\"type-colon\\\">:</span>\";\r\n\t\t\tvar valueAppendable = {\r\n                destination : \"\"\r\n            }\r\n            value.formatJsonToHtml(valueAppendable,currentLevel);\r\n            destination += valueAppendable.destination;\r\n           \r\n            if(j != (size-1))\r\n                destination += \"<span class=\\\"type-comma\\\">\" + \",\" + \"</span>\";\r\n            destination += \"</li>\";\r\n            j++;  \r\n        });\r\n        destination += \"</ul>\";\r\n        destination += \"<span class=\\\"type-symbol\\\">}</span>\";\r\n        if(this._root) {\r\n            destination += \"</code></div>\";\r\n        }\r\n\r\n        appendable.destination = destination;\r\n    }\r\n}","\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonBoolean extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        //console.log('destination->' + destination);\r\n        appendable.destination = null;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        destination += \"<span class=\\\"type-null\\\">\";\r\n        destination += this._input + \"</span>\";\r\n        appendable.destination = destination;\r\n    }\r\n}","\r\nimport JsonObject from './JsonObject.js';\r\n\r\nexport default class JsonNumber extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        //console.log('destination->' + destination);\r\n        appendable.destination += this._input;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        destination += \"<span class=\\\"type-number\\\">\";\r\n        destination += this._input + \"</span>\";\r\n        appendable.destination = destination;\r\n    }\r\n}","export default class JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        // if (this.constructor === JsonObject) {\r\n        //     throw new TypeError(\"Can not construct abstract class.\");\r\n        // }\r\n\r\n        if (this.formatJsonToString === JsonObject.prototype.formatJsonToString) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract method formatJsonToString.\");\r\n        }\r\n\r\n        if (this.formatJsonToHtml === JsonObject.prototype.formatJsonToHtml) {\r\n            // Error Type 4. Child has not implemented this abstract method.\r\n            throw new TypeError(\"Please implement abstract method formatJsonToHtml.\");\r\n        }\r\n        this._root = root;\r\n        this._isKey = isKey;\r\n        this._input = input;\r\n        this._keyValue = false;\r\n        this._rawInput = '';\r\n    }\r\n\r\n    get root() {\r\n        return this._root;\r\n    }\r\n\r\n    set root(newRoot) {\r\n        this._root = newRoot;\r\n    }\r\n\r\n    get isKey() {\r\n        return this._isKey;\r\n    }\r\n\r\n    set isKey(newKey) {\r\n        this._isKey = newKey;\r\n    }\r\n\r\n    get input() {\r\n        return this._input;\r\n    }\r\n\r\n    set input(newInput) {\r\n        this._input = newInput;\r\n    }\r\n\r\n    get rawInput() {\r\n        return this._rawInput;\r\n    }\r\n\r\n    set rawInput(raw) {\r\n        this._rawInput = raw;\r\n    }\r\n\r\n    set keyValue(newValue) {\r\n        this._keyValue = newValue;\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        throw new TypeError(\"Do not call abstract method toString from child.\");\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        throw new TypeError(\"Do not call abstract method toHtml from child.\");\r\n    }\r\n}","import JsonObject from './JsonObject.js';\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class JsonString extends JsonObject {\r\n\r\n    constructor(root, isKey, input) {\r\n        super(root, isKey, input);\r\n    }\r\n\r\n    formatJsonToString(appendable, currentLevel) {\r\n        ++currentLevel;\r\n        let destination = \"\";\r\n        let tabs = '';\r\n        let i;\r\n        for (i = 0; i < currentLevel; i++)\r\n            tabs = tabs.concat(\"\\t\");\r\n        logger.debug('appendable->' + appendable);\r\n        if (this._isKey) {\r\n            destination += tabs + \"\\\"\" + this._input + \"\\\"\";\r\n        } else if (this._keyValue) {    \r\n            destination += \"\\\"\" + this._input + \"\\\"\";\r\n        } else {\r\n            destination += tabs + \"\\\"\" + this._input + \"\\\"\";\r\n        }\r\n        logger.debug('destination->' + destination);\r\n        appendable.destination = destination;\r\n    }\r\n\r\n    formatJsonToHtml(appendable, currentLevel) {\r\n        let destination = \"\";\r\n        if (this._isKey) {\r\n            destination += \"<span class=\\\"type-key\\\">\\\"\";\r\n        } else {\r\n            destination += \"<span class=\\\"type-string\\\">\\\"\";\r\n        }\r\n        destination += this._input + \"\\\"</span>\";\r\n        appendable.destination = destination;\r\n    }\r\n}","module.exports.debug = (msg) => {\r\n    console.log(msg);\r\n}\r\nmodule.exports.info = (msg) => {console.log(msg);}","import JsonString from \"../json/JsonString\";\r\nimport JsonBoolean from \"../json/JsonBoolean\";\r\nimport JsonNumber from \"../json/JsonNumber\";\r\nimport JsonNull from \"../json/JsonNull\";\r\nimport RJsonConstants from \"./RJsonConstants\";\r\nimport StringReader from \"../io/StringReader\";\r\nimport CharStream from \"../io/CharStream\";\r\nimport RJsonLexer from \"./RJsonLexer\";\r\nimport RJsonToken from \"./RJsonToken\";\r\n\r\nexport default class RJsonAbsParser extends RJsonConstants {\r\n\r\n    constructor(rinput) {\r\n        super();\r\n        this.input = rinput;\r\n        this.reader = new StringReader(this.input);\r\n        this.stream = new CharStream(this.reader);\r\n        this.lexer = new RJsonLexer(this.stream);\r\n        this.token = new RJsonToken();\r\n        this.token.next = this.jj_nt = this.lexer.getNextToken();\r\n        this.jj_gen = 0;\r\n        this.jj_la1 = new Array(13);\r\n        this.jj_la1_0 = [0xccf8480, 0x78000, 0x1ccf8000, 0x40, 0x1ccf8000, 0x40, 0xccf8480, 0xccf8000, 0x60000, 0x18000, 0xcc00000, 0x8800000, 0x4400000,];;\r\n        var i;\r\n        for (i = 0; i < 13; i++)\r\n            this.jj_la1[i] = -1;\r\n\r\n        this.jj_kind = -1;\r\n        this.nativeNumbers = false;\r\n    }\r\n\r\n    getNextToken() {\r\n        if ((this.token = this.jj_nt).next != null) this.jj_nt = this.jj_nt.next;\r\n        else this.jj_nt = this.jj_nt.next = this.lexer.getNextToken();\r\n        this.jj_gen++;\r\n        return this.token;\r\n    }\r\n\r\n    objectKey() {\r\n        let o, key;\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                key = this.string();\r\n                break;\r\n            case SYMBOL:\r\n                key = this.symbol();\r\n                break;\r\n            case NULL:\r\n                this.nullValue();\r\n                key = null;\r\n                break;\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n                switch (this.jj_nt.kind) {\r\n                    case this.TRUE:\r\n                    case this.FALSE:\r\n                        o = this.booleanValue();\r\n                        break;\r\n                    case this.NUMBER_INTEGER:\r\n                    case this.NUMBER_DECIMAL:\r\n                        o = this.number();\r\n                        break;\r\n                    default:\r\n                        this.jj_la1[1] = this.jj_gen;\r\n                        this.jj_consume_token(-1);\r\n                        throw new Error();\r\n                }\r\n                key = o;\r\n                break;\r\n            default:\r\n                this.jj_la1[2] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n        { if (true) { key.key = true; return key; } }\r\n    }\r\n\r\n    string() {\r\n        let s;\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                s = this.doubleQuoteString();\r\n                break;\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n                s = this.singleQuoteString();\r\n                break;\r\n            default:\r\n                this.jj_la1[10] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n        { if (true) return s; }\r\n    }\r\n\r\n    doubleQuoteString() {\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_DOUBLE_EMPTY:\r\n                this.jj_consume_token(this.STRING_DOUBLE_EMPTY);\r\n                { if (true) return new JsonString(false, false, \"\"); }\r\n                break;\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                this.jj_consume_token(this.STRING_DOUBLE_NONEMPTY);\r\n                var image = this.token.image;\r\n                { if (true) return new JsonString(false, false, image); }\r\n                break;\r\n            default:\r\n                this.jj_la1[11] = this.sjj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    singleQuoteString() {\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_SINGLE_EMPTY:\r\n                this.jj_consume_token(this.STRING_SINGLE_EMPTY);\r\n                { if (true) return new JsonString(false, false, \"\"); }\r\n                break;\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n                this.jj_consume_token(this.STRING_SINGLE_NONEMPTY);\r\n                var image = token.image;\r\n                { if (true) return new JsonString(false, false, image); }\r\n                break;\r\n            default:\r\n                this.jj_la1[12] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    symbol() {\r\n        this.jj_consume_token(this.SYMBOL);\r\n        { if (true) return new JsonString(false, false, token.image); }\r\n    }\r\n\r\n    nullValue() {\r\n        this.jj_consume_token(this.NULL);\r\n        { if (true) return new JsonNull(); }\r\n    }\r\n\r\n    booleanValue() {\r\n        var b;\r\n        switch (this.jj_nt.kind) {\r\n            case this.TRUE:\r\n                this.jj_consume_token(this.TRUE);\r\n                b = true;\r\n                break;\r\n            case this.FALSE:\r\n                this.jj_consume_token(this.FALSE);\r\n                b = false;\r\n                break;\r\n            default:\r\n                this.jj_la1[8] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n        { if (true) return new JsonBoolean(b); }\r\n    }\r\n\r\n    value() {\r\n        let x;\r\n        switch (this.jj_nt.kind) {\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                x = this.string();\r\n                break;\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n                x = this.number();\r\n                break;\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n                x = this.booleanValue();\r\n                break;\r\n            case this.NULL:\r\n                x = this.nullValue();\r\n                break;\r\n            default:\r\n                this.jj_la1[7] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n        { if (true) return x; }\r\n    }\r\n\r\n    number() {\r\n        let t;\r\n        switch (this.jj_nt.kind) {\r\n            case this.NUMBER_DECIMAL:\r\n                t = this.jj_consume_token(this.NUMBER_DECIMAL);\r\n                if (nativeNumbers) {\r\n                    { if (true) return new JsonNumber(false, false, t.image); }\r\n                } else {\r\n                    { if (true) return new JsonNumber(false, false, t.image); }\r\n                }\r\n                break;\r\n            case this.NUMBER_INTEGER:\r\n                t = this.jj_consume_token(this.NUMBER_INTEGER);\r\n                if (this.nativeNumbers) {\r\n                    { if (true) return new JsonNumber(false, false, t.image); }\r\n                } else {\r\n                    { if (true) return new JsonNumber(false, false, t.image); }\r\n                }\r\n                break;\r\n            default:\r\n                this.jj_la1[9] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new Error();\r\n        }\r\n    }\r\n}","export default class RJsonConstants {\r\n\r\n    constructor() {\r\n        /** End of File. */\r\n        this.EOF = 0;\r\n        /** RegularExpression Id. */\r\n        this.C_SINGLE_COMMENT = 1;\r\n        /** RegularExpression Id. */\r\n        this.C_MULTILINE_COMMENT = 2;\r\n        /** RegularExpression Id. */\r\n        this.SH_SINGLE_COMMENT = 3;\r\n        /** RegularExpression Id. */\r\n        this.WHITESPACE = 4;\r\n        /** RegularExpression Id. */\r\n        this.EOL = 5;\r\n        /** RegularExpression Id. */\r\n        this.COMMA = 6;\r\n        /** RegularExpression Id. */\r\n        this.BRACE_OPEN = 7;\r\n        /** RegularExpression Id. */\r\n        this.BRACE_CLOSE = 8;\r\n        /** RegularExpression Id. */\r\n        this.COLON = 9;\r\n        /** RegularExpression Id. */\r\n        this.BRACKET_OPEN = 10;\r\n        /** RegularExpression Id. */\r\n        this.BRACKET_CLOSE = 11;\r\n        /** RegularExpression Id. */\r\n        this.ZERO = 12;\r\n        /** RegularExpression Id. */\r\n        this.DIGIT_NONZERO = 13;\r\n        /** RegularExpression Id. */\r\n        this.DIGIT = 14;\r\n        /** RegularExpression Id. */\r\n        this.NUMBER_INTEGER = 15;\r\n        /** RegularExpression Id. */\r\n        this.NUMBER_DECIMAL = 16;\r\n        /** RegularExpression Id. */\r\n        this.TRUE = 17;\r\n        /** RegularExpression Id. */\r\n        this.FALSE = 18;\r\n        /** RegularExpression Id. */\r\n        this.NULL = 19;\r\n        /** RegularExpression Id. */\r\n        this.QUOTE_DOUBLE = 20;\r\n        /** RegularExpression Id. */\r\n        this.QUOTE_SINGLE = 21;\r\n        /** RegularExpression Id. */\r\n        this.STRING_SINGLE_EMPTY = 22;\r\n        /** RegularExpression Id. */\r\n        this.STRING_DOUBLE_EMPTY = 23;\r\n        /** RegularExpression Id. */\r\n        this.STRING_SINGLE_BODY = 24;\r\n        /** RegularExpression Id. */\r\n        this.STRING_DOUBLE_BODY = 25;\r\n        /** RegularExpression Id. */\r\n        this.STRING_SINGLE_NONEMPTY = 26;\r\n        /** RegularExpression Id. */\r\n        this.STRING_DOUBLE_NONEMPTY = 27;\r\n        /** RegularExpression Id. */\r\n        this.SYMBOL = 28;\r\n\r\n        /** Lexical state. */\r\n        this.DEFAULT = 0;\r\n\r\n        this.LEXICAL_ERROR = 0;\r\n\r\n        /** Literal token values. */\r\n        this.tokenImage = [\r\n            \"<EOF>\",\r\n            \"<C_SINGLE_COMMENT>\",\r\n            \"<C_MULTILINE_COMMENT>\",\r\n            \"<SH_SINGLE_COMMENT>\",\r\n            \"<WHITESPACE>\",\r\n            \"<EOL>\",\r\n            \"\\\",\\\"\",\r\n            \"\\\"{\\\"\",\r\n            \"\\\"}\\\"\",\r\n            \"\\\":\\\"\",\r\n            \"\\\"[\\\"\",\r\n            \"\\\"]\\\"\",\r\n            \"\\\"0\\\"\",\r\n            \"<DIGIT_NONZERO>\",\r\n            \"<DIGIT>\",\r\n            \"<NUMBER_INTEGER>\",\r\n            \"<NUMBER_DECIMAL>\",\r\n            \"\\\"true\\\"\",\r\n            \"\\\"false\\\"\",\r\n            \"\\\"null\\\"\",\r\n            \"\\\"\\\\\\\"\\\"\",\r\n            \"\\\"\\\\\\'\\\"\",\r\n            \"\\\"\\\\\\'\\\\\\'\\\"\",\r\n            \"\\\"\\\\\\\"\\\\\\\"\\\"\",\r\n            \"<STRING_SINGLE_BODY>\",\r\n            \"<STRING_DOUBLE_BODY>\",\r\n            \"<STRING_SINGLE_NONEMPTY>\",\r\n            \"<STRING_DOUBLE_NONEMPTY>\",\r\n            \"<SYMBOL>\",\r\n        ];\r\n    }\r\n}","import RJsonToken from './RJsonToken.js';\r\nimport RJsonTokenMgrError from './RJsonTokenMgrError.js';\r\nimport RJsonConstants from './RJsonConstants.js';\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class RJsonLexer extends RJsonConstants {\r\n\r\n    constructor(istream) {\r\n        super();\r\n        this.input_stream = istream;\r\n        this.curChar = '';\r\n        this.matchedKind = 0;\r\n        this.matchedPos = 0;\r\n        this.toToken = [0x1ccf8fc1,];\r\n        this.curLexState = 0;\r\n        // this.strLiteralImages = [\r\n        //     \"\", null, null, null, null, 'null', '0o54', 0o173, 0o175, 0o072, 0o133, \r\n        //     0o135, null, null, null, null, null, null, null, null, null, null, \"\\'\", \r\n        //     \"\\\"\", null, null, null, null, null, ];\r\n        this.strLiteralImages = [\r\n            \"\", null, null, null, null, 'null', ',', '{', '}', ':', '[',\r\n            ']', null, null, null, null, null, null, null, null, null, null, \"\\'\",\r\n            \"\\\"\", null, null, null, null, null,];\r\n    }\r\n\r\n    getNextToken() {\r\n        logger.debug(\"getNextToken()\");\r\n        var matchedToken = null;\r\n        var curPos = 0;\r\n        EOFLoop:\r\n        for (; ;) {\r\n            try {\r\n                this.curChar = this.input_stream.beginToken();\r\n            } catch (e) {\r\n                //logger.debug(e.stack);\r\n                this.matchedKind = 0;\r\n                matchedToken = this.fillToken();\r\n                return matchedToken;\r\n            }\r\n            logger.debug(\"this.curChar =\" + this.curChar);\r\n            this.matchedKind = 0x7fffffff;\r\n            this.matchedPos = 0;\r\n            curPos = this.analyzeCurrentCharacter();\r\n            logger.debug(\"matchedKind()->\" + this.matchedKind + \",curPos->\" + curPos);\r\n            if (this.matchedKind != 0x7fffffff) {\r\n               \r\n                if (this.matchedPos + 1 < curPos) {\r\n                    this.input_stream.backup(curPos - this.matchedPos - 1); // possible backtracking.\r\n                }\r\n                logger.debug(\"curPos=\" + curPos);\r\n                if ((this.matchedKind == this.C_SINGLE_COMMENT)\r\n                    || (this.matchedKind == this.C_MULTILINE_COMMENT)) {\r\n                    this.matchedToken = this.fillToken();\r\n                    logger.debug(\"getNextToken()::Matched\" + this.matchedKind);\r\n                    return matchedToken;\r\n                }\r\n                if (this.matchedKind == this.BRACE_OPEN || this.matchedKind == this.TRUE\r\n                    || this.matchedKind == this.NUMBER_INTEGER\r\n                    || this.matchedKind == this.NULL\r\n                    || this.matchedKind == this.COMMA) {\r\n                    matchedToken = this.fillToken();\r\n                    logger.debug(\"getNextToken()::Matched->\" + matchedToken);\r\n                    return matchedToken;\r\n                }\r\n                if ((this.toToken[this.matchedKind >> 6] & (1 << (this.matchedKind & 77))) != 0) {\r\n                    matchedToken = this.fillToken();\r\n                    logger.debug(\"getNextToken()::Matched >> 6->\" + this.matchedKind);\r\n                    return matchedToken;\r\n                } else {\r\n                    continue EOFLoop;\r\n                }\r\n            }\r\n            // error begins.....\r\n            let error_line = this.input_stream.getEndLine;\r\n            let error_column = this.input_stream.getEndColumn;\r\n            let error_after = null;\r\n            let EOFSeen = false;\r\n            try {\r\n                this.input_stream.readChar();\r\n                this.input_stream.backup(1);\r\n            } catch (e1) {\r\n                logger.debug(e1.stack);\r\n                EOFSeen = true;\r\n                error_after = curPos <= 1 ? \"\" : this.input_stream.getImage();\r\n                if (this.curChar == '\\n' || this.curChar == '\\r') {\r\n                    error_line++;\r\n                    error_column = 0;\r\n                } else {\r\n                    error_column++;\r\n                }\r\n            }\r\n            logger.debug('xxxxxxxxxxxx');\r\n            if (!EOFSeen) {\r\n                logger.debug('xxxxxxxxxxxx');\r\n                this.input_stream.backup(1);\r\n                error_after = curPos <= 1 ? \"\" : this.input_stream.getImage();\r\n            }\r\n            logger.debug('zzzzzzzzzzzzzzzz');\r\n            throw new RJsonTokenMgrError(EOFSeen, this.curLexState, error_line, error_column, error_after, this.curChar, this.LEXICAL_ERROR);\r\n        }\r\n    }\r\n\r\n    analyzeCurrentCharacter() {\r\n        if (this.curChar == ' ' || this.curChar == '\\t' || this.curChar == '\\n' || this.curChar == '\\r') {\r\n            this.consume_char();\r\n            try {\r\n                this.curChar = this.input_stream.readChar();\r\n            } catch (e) {\r\n                // hack for special characters after the last token.\r\n                this.matchedKind = 0;\r\n                return 1;\r\n            }\r\n            return this.analyzeCurrentCharacter();\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        //logger.debug('analyzeCurrentCharacter()->' + code);\r\n        switch (code) {\r\n            case 123: // '{'\r\n                return this.stopAtPos(0, this.BRACE_OPEN);\r\n            case 125: // '}'\r\n                return this.stopAtPos(0, this.BRACE_CLOSE);\r\n            case 34: // '\"'\r\n                return this.moveChar01(8);\r\n            case 39: // '\\''\r\n                return this.moveChar01(4);\r\n            case 44: // ','\r\n                return this.stopAtPos(0, this.COMMA);\r\n            case 58: // ':'\r\n                return this.stopAtPos(0, this.COLON);\r\n            case 91: // '['\r\n                return this.stopAtPos(0, this.BRACKET_OPEN);\r\n            case 93: // ']'\r\n                return this.stopAtPos(0, this.BRACKET_CLOSE);\r\n            case 70: // 'F'\r\n            case 102: // 'f'\r\n                return this.moveChar01(4);\r\n            case 78: // 'N'\r\n            case 110: // 'n'\r\n                return this.moveChar01(8);\r\n            case 84: // 'T'\r\n            case 116: // 't'\r\n                return this.moveChar01(2);\r\n            case 47: // '/'\r\n                return this.moveChar01(6);\r\n            case 35: // '#'\r\n                return this.moveChar(0, '\\n');\r\n            default:\r\n                return this.findNumber(0, 0);\r\n        }\r\n    }\r\n\r\n    isDigit() {\r\n        logger.debug(\"\\\"\" + this.curChar + \"\\\"\");\r\n        let code = this.curChar.charCodeAt();\r\n\r\n        if (code == 46) { // '.'\r\n            return true;\r\n        }\r\n\r\n        if (code > 47 && code < 58) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    findNumber(startState, curPos) {\r\n        logger.debug(\"\\\"\" + this.curChar + \"\\\"\");\r\n        while (this.isDigit()) {\r\n            ++curPos;\r\n            try {\r\n                this.curChar = this.input_stream.readChar();\r\n            } catch (e) {\r\n                return curPos;\r\n            }\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"\\\"\" + this.curChar + \"\\\"\");\r\n        if (code == 44 || code == 125\r\n            || this.curChar == '\\r' || this.curChar == '\\n' || this.curChar == ' '\r\n            || this.curChar == '\\t') {\r\n            --curPos;\r\n            logger.debug(\"\\\"\" + this.curChar + \"\\\"\");\r\n            this.matchedKind = this.NUMBER_INTEGER;\r\n            this.matchedPos = curPos;\r\n            this.input_stream.backup(1);\r\n            return curPos;\r\n        }\r\n        // not a valid numbers\r\n        return curPos;\r\n    }\r\n\r\n    findStringLiteral(curPos, active0) {\r\n        //logger.debug(\"finding string literal\");\r\n        var kind = 0x7fffffff;\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 1;\r\n        }\r\n        for (; ;) {\r\n            let code = this.curChar.charCodeAt();\r\n            //logger.debug(\"findStringLiteral() = \" + code);\r\n            switch (code) {\r\n                case 34: // '\"'\r\n                    kind = this.STRING_DOUBLE_NONEMPTY;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            ++curPos;\r\n            if (kind != 0x7fffffff) {\r\n                this.matchedKind = kind;\r\n                this.matchedPos = curPos;\r\n                //logger.debug(\"returning curPos = \" + curPos);\r\n                return curPos;\r\n            }\r\n            try {\r\n                this.curChar = this.input_stream.readChar();\r\n            } catch (e) {\r\n                logger.debug(e.stack);\r\n                return curPos;\r\n            }\r\n        }\r\n    }\r\n\r\n    moveChar(curPos, target) {\r\n        logger.debug(\"moveChar::curChar=\" + this.curChar + \",target=\" + target);\r\n        var kind = 0x7fffffff;\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 1;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        for (; ;) {\r\n            if (this.curChar == '\\n' || this.curChar == '\\r' || this.curChar == '\\f') {\r\n                kind = this.C_SINGLE_COMMENT;\r\n            }\r\n            if (code == 42) { // '*'\r\n                \r\n                // lookahead for char '/'\r\n                try {\r\n                    this.curChar = this.input_stream.readChar();\r\n                } catch (e) {\r\n                    return 1;\r\n                }\r\n                let ccode = this.curChar.charCodeAt();\r\n                if (ccode == 47) {\r\n                    ++curPos;\r\n                    kind = this.C_MULTILINE_COMMENT;\r\n                } else {\r\n                    this.input_stream.backup(1);\r\n                }\r\n            }\r\n\r\n            ++curPos;\r\n            if (kind != 0x7fffffff) {\r\n                this.matchedKind = kind;\r\n                this.matchedPos = curPos;\r\n                return curPos;\r\n            }\r\n            try {\r\n                this.curChar = this.input_stream.readChar();\r\n            } catch (e) {\r\n                return curPos;\r\n            }\r\n            code = this.curChar.charCodeAt();\r\n        }\r\n    }\r\n\r\n    moveChar01(active0) {\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 1;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"moveChar01::curChar=\" + this.curChar + \",code=\" + code);\r\n        switch (code) {\r\n            case 34: // '\"'\r\n                if ((active0 & 8) != 0)\r\n                    return this.stopAtPos(1, this.STRING_DOUBLE_EMPTY);\r\n                break;\r\n            case 39: // '\\''\r\n                if ((active0 & 4) != 0)\r\n                    return this.stopAtPos(1, this.STRING_SINGLE_EMPTY);\r\n                break;\r\n            case 65: // 'A'\r\n            case 97: // 'a'\r\n                if ((active0 & 4) != 0)\r\n                    return this.moveChar02(active0, 4);\r\n                break;\r\n            case 82: // 'R'\r\n            case 114: // 'r'\r\n                if ((active0 & 2) != 0)\r\n                    return this.moveChar02(active0, 4);\r\n                break;\r\n            case 85: // 'U'\r\n            case 117: // 'u'\r\n                if ((active0 & 8) != 0)\r\n                    return this.moveChar02(active0, 8);\r\n                break;\r\n            case 47: // '/' - C_SINGLE_COMMENT\r\n                if ((active0 & 6) != 0)\r\n                    return this.moveChar(0, '\\n');\r\n                break;\r\n            case 42: // '*' - C_MULTILINE_COMMENT\r\n                if ((active0 & 6) != 0)\r\n                    return this.moveChar(0, '*');\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n        return this.findStringLiteral(0, active0);\r\n    }\r\n\r\n    moveChar02(old0, active0) {\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 2;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"moveChar02::curChar=\" + this.curChar + \",code=\" + code);\r\n        switch (code) {\r\n            case 76: // L\r\n            case 108:// l\r\n                return this.moveChar03(active0, 5);\r\n            case 85:// U\r\n            case 117:// u\r\n                return this.moveChar03(active0, 2);\r\n            default:\r\n                break;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    moveChar03(old0, active0) {\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 3;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"moveChar03::curChar=\" + this.curChar + \",code=\" + code);\r\n        switch (code) {\r\n            case 69: // E\r\n            case 101: // e\r\n                if ((active0 & 2) != 0)\r\n                    return this.stopAtPos(3, this.TRUE);\r\n                break;\r\n            case 76: // L\r\n            case 108:// l\r\n                \r\n                if ((active0 & 5) != 0) {\r\n                    logger.debug('moveChar03->foundNull-' + (active0 & 5));\r\n                    return this.stopAtPos(3, this.NULL);\r\n                }\r\n                break;\r\n            case 83: // S\r\n            case 115:// s\r\n                return this.moveChar04(active0, 4);\r\n            default:\r\n                break;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    moveChar04(old0, active0) {\r\n        try {\r\n            this.curChar = this.input_stream.readChar();\r\n        } catch (e) {\r\n            return 4;\r\n        }\r\n        let code = this.curChar.charCodeAt();\r\n        logger.debug(\"moveChar04::curChar=\" + this.curChar + \",code=\" + code);\r\n        switch (code) {\r\n            case 69: // E\r\n            case 101:// e\r\n                if ((active0 & 4) != 0)\r\n                    return this.stopAtPos(4, this.FALSE);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    stopAtPos(pos, kind) {\r\n        this.matchedKind = kind;\r\n        this.matchedPos = pos;\r\n        return pos + 1;\r\n    }\r\n\r\n    checkForSpace() {\r\n        let code = this.curChar.charCodeAt();\r\n        if (code == 32) {\r\n            try {\r\n                curChar = input_stream.readChar();\r\n            } catch (e) {\r\n            }\r\n            let ccode = this.curChar.charCodeAt();\r\n            if (ccode != 32) {\r\n                input_stream.backup(1);\r\n                return;\r\n            } else {\r\n                this.checkForSpace();\r\n            }\r\n        }\r\n    }\r\n\r\n    fillToken() {\r\n        let beginLine = this.input_stream.getBeginLine;\r\n        let beginColumn = this.input_stream.getBeginColumn;\r\n        let endLine = this.input_stream.getEndLine;\r\n        let endColumn = this.input_stream.getEndColumn;\r\n        var im = this.strLiteralImages[this.matchedKind];\r\n        let tokenImage = (im == null) ? this.input_stream.getImage() : im;\r\n        //let tokenImage = this.input_stream.getImage();\r\n        let token = RJsonToken.newToken(this.matchedKind, tokenImage);\r\n        logger.debug('generated new token ->' + token.toString());\r\n        token.beginLine = beginLine;\r\n        token.endLine = endLine;\r\n        token.beginColumn = beginColumn;\r\n        token.endColumn = endColumn;\r\n        return token;\r\n    }\r\n\r\n    consume_char() {\r\n        if (this.curChar == '\\n') {\r\n        } else if (this.curChar == ' ') {\r\n            this.input_stream.spaceDetected();\r\n        }\r\n\r\n    }\r\n}\r\n","import JsonMap from \"../json/JsonMap\";\r\nimport JsonList from \"../json/JsonList\";\r\nimport RJsonAbsParser from \"./RJsonAbsParser\";\r\nimport RJsonParserError from \"./RJsonParserError\";\r\n\r\nvar logger = require('../logger/logger');\r\n\r\nexport default class RJsonParser extends RJsonAbsParser {\r\n\r\n    constructor(rinput) {\r\n        super(rinput);\r\n    }\r\n\r\n    parse() {\r\n        var toReturn = this.anything();\r\n        toReturn.root = true;\r\n        toReturn.rawInput = this.input;\r\n        if (!this.ensureEOF()) {\r\n            throw new Error(\"parser.expectedEOF\");\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    anything() {\r\n        logger.debug(\"RJsonParser::anything()\" + this.jj_nt.toString());\r\n        let x;\r\n        switch (this.jj_nt.kind) {\r\n            case this.BRACE_OPEN:\r\n                x = this.object();\r\n                break;\r\n            case this.BRACKET_OPEN:\r\n                x = this.list();\r\n                break;\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n            case this.NULL:\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                x = this.value();\r\n                break;\r\n            default:\r\n                this.jj_la1[0] = this.jj_gen;\r\n                this.jj_consume_token(-1);\r\n                throw new RJsonParserError();\r\n        }\r\n        { if (true) return x; }\r\n    }\r\n\r\n    object() {\r\n        let map = new JsonMap(true, false, new Map());\r\n        let key, value;\r\n        this.jj_consume_token(this.BRACE_OPEN);\r\n        switch (this.jj_nt.kind) {\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n            case this.NULL:\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n            case this.SYMBOL:\r\n                key = this.objectKey();\r\n                this.jj_consume_token(this.COLON);\r\n                value = this.anything();\r\n                value.key = true;\r\n                map.put(key, value);\r\n                key = null; value = null;\r\n                label_1:\r\n                while (true) {\r\n                    switch (this.jj_nt.kind) {\r\n                        case this.COMMA:\r\n                            ;\r\n                            break;\r\n                        default:\r\n                            this.jj_la1[3] = this.jj_gen;\r\n                            break label_1;\r\n                    }\r\n                    this.jj_consume_token(this.COMMA);\r\n                    key = this.objectKey();\r\n                    this.jj_consume_token(this.COLON);\r\n                    value = this.anything();\r\n                    value.key = true;\r\n                    map.put(key, value);\r\n                    key = null; value = null;\r\n                }\r\n                break;\r\n            default:\r\n                this.jj_la1[4] = jj_gen;\r\n        }\r\n        this.jj_consume_token(this.BRACE_CLOSE);\r\n        { if (true) return map; }\r\n    }\r\n\r\n    list() {\r\n        let list = new JsonList(true, false, []);\r\n        logger.debug(\"RJsonParser::list()\" + this.jj_nt.toString());\r\n        let value;\r\n        this.jj_consume_token(this.BRACKET_OPEN);\r\n        switch (this.jj_nt.kind) {\r\n            case this.BRACE_OPEN:\r\n            case this.BRACKET_OPEN:\r\n            case this.NUMBER_INTEGER:\r\n            case this.NUMBER_DECIMAL:\r\n            case this.TRUE:\r\n            case this.FALSE:\r\n            case this.NULL:\r\n            case this.STRING_SINGLE_EMPTY:\r\n            case this.STRING_DOUBLE_EMPTY:\r\n            case this.STRING_SINGLE_NONEMPTY:\r\n            case this.STRING_DOUBLE_NONEMPTY:\r\n                value = this.anything();\r\n                list.add(value);\r\n                value = null;\r\n                label_2:\r\n                while (true) {\r\n                    switch (this.jj_nt.kind) {\r\n                        case this.COMMA:\r\n                            ;\r\n                            break;\r\n                        default:\r\n                            this.jj_la1[5] = this.jj_gen;\r\n                            break label_2;\r\n                    }\r\n                    this.jj_consume_token(this.COMMA);\r\n                    value = this.anything();\r\n                    list.add(value);\r\n                    value = null;\r\n                }\r\n                break;\r\n            default:\r\n                this.jj_la1[6] = this.jj_gen;\r\n                ;\r\n        }\r\n        this.jj_consume_token(this.BRACKET_CLOSE);\r\n        {if (true) return list;}\r\n    }\r\n\r\n    \r\n\r\n    ensureEOF() {\r\n        this.jj_consume_token(0);\r\n        { if (true) return true; }\r\n    }\r\n\r\n    jj_consume_token(kind) {\r\n        \r\n        logger.debug(\"01-RJsonParser::jj_consume_token::this.jj_nt=\" + this.jj_nt + \",cKind=\" + kind + \",this.jj_nt.next=\" + this.jj_nt.next);\r\n        var oldToken = this.token;\r\n        if ((this.token = this.jj_nt).next != null) {\r\n            this.jj_nt = this.jj_nt.next;\r\n        } else {\r\n            this.jj_nt = this.jj_nt.next = this.lexer.getNextToken();\r\n            logger.debug(\"02-RJsonParser::jj_consume_token::this.jj_nt=\" + this.jj_nt + \",cKind=\" + kind+ \",this.jj_nt.next=\" + this.jj_nt.next);\r\n        }\r\n        \r\n        \r\n        if (this.token.kind === kind) {\r\n            this.jj_gen++;\r\n            return this.token;\r\n        }\r\n        this.jj_nt = this.token;\r\n        this.token = oldToken;\r\n        this.jj_kind = kind;\r\n        logger.debug('-------------------');\r\n        throw this.generateParseException();\r\n        \r\n    }\r\n\r\n    generateParseException() {\r\n        logger.debug('generateParseException');\r\n        var jj_expentries = [];\r\n        var la1tokens = [];\r\n        var jj_expentry = [];\r\n        var i, j, k, l;\r\n        if (this.jj_kind >= 0) {\r\n            la1tokens[this.jj_kind] = true;\r\n            this.jj_kind = -1;\r\n        }\r\n        for (i = 0; i < 13; i++) {\r\n            if (this.jj_la1[i] == this.jj_gen) {\r\n                for (j = 0; j < 32; j++) {\r\n                    if ((this.jj_la1_0[i] & (1 << j)) != 0) {\r\n                        la1tokens[j] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (k = 0; k < 29; k++) {\r\n            if (la1tokens[k]) {\r\n                jj_expentry[0] = k;\r\n                jj_expentries.push(jj_expentry);\r\n            }\r\n        }\r\n        var exptokseq = [];\r\n        for (l = 0; l < jj_expentries.size; l++) {\r\n            exptokseq[l] = jj_expentries[l];\r\n        }\r\n        \r\n        var e =  new RJsonParserError(this.token, exptokseq, this.tokenImage);\r\n        logger.debug('generateParseException ::' + e.getMessage());\r\n        return e;\r\n    }\r\n\r\n    static runParser(input) {\r\n        var instance = new RJsonParser(input);\r\n        var jsonObject = instance.parse();\r\n        return jsonObject;\r\n    }\r\n}\r\n\r\nexport function runParser(input) {\r\n    RJsonParser.runParser(input);\r\n}","export default class RJsonParserError extends Error {\r\n\r\n    constructor(_currentTokenVal, _expectedTokenSequencesVal, _tokenImageVal) {\r\n        super();\r\n        this.currentToken = _currentTokenVal;\r\n        this.expectedTokenSequences = _expectedTokenSequencesVal;\r\n        this.tokenImage = _tokenImageVal;\r\n        this.eol = \"&\";\r\n    }\r\n\r\n    toString() {\r\n        return \"i am exception\";\r\n    }\r\n\r\n    getMessage() {\r\n        let expected = '';\r\n        let maxSize, i, j = 0;\r\n        for (i = 0; i < this.expectedTokenSequences.length; i++) {\r\n            if (maxSize < this.expectedTokenSequences[i].length) {\r\n                maxSize = this.expectedTokenSequences[i].length;\r\n            }\r\n            for (j = 0; j < this.expectedTokenSequences[i].length; j++) {\r\n                expected += this.tokenImage[this.expectedTokenSequences[i][j]] + ' ';\r\n            }\r\n            if (this.expectedTokenSequences[i][this.expectedTokenSequences[i].length - 1] != 0) {\r\n                expected += \"...\";\r\n            }\r\n            expected += eol + \"    \";\r\n        }\r\n\r\n        let retval = \"Encountered \\\"\";\r\n        let tok = this.currentToken.next;\r\n        for (i = 0; i < maxSize; i++) {\r\n            if (i != 0) retval += \" \";\r\n            if (tok.kind == 0) {\r\n                retval += this.tokenImage[0];\r\n                break;\r\n            }\r\n            retval += \" \" + this.tokenImage[tok.kind];\r\n            retval += \" \\\"\";\r\n            retval += this.add_escapes(tok.image);\r\n            retval += \" \\\"\";\r\n            tok = tok.next;\r\n        }\r\n\r\n        retval += \"\\\" at line \" + this.currentToken.next.beginLine + \", column \" + this.currentToken.next;\r\n        retval += \".\" + this.eol;\r\n        if (this.expectedTokenSequences.length == 1) {\r\n            retval += \"Was expecting:\" + this.eol + \"    \";\r\n        } else {\r\n            retval += \"Was expecting one of:\" + this.eol + \"    \";\r\n        }\r\n        retval += expected;\r\n        return retval;\r\n    }\r\n\r\n    addEscapes(str) {\r\n        let i,ch;\r\n        let retval = \"\";\r\n        for (i = 0; i < str.length; i++) {\r\n            switch (str.charAt(i)) {\r\n                case 0:\r\n                    continue;\r\n                case '\\b':\r\n                    retval += \"\\\\b\";\r\n                    continue;\r\n                case '\\t':\r\n                    retval += \"\\\\t\";\r\n                    continue;\r\n                case '\\n':\r\n                    retval += \"\\\\n\";\r\n                    continue;\r\n                case '\\f':\r\n                    retval += \"\\\\f\";\r\n                    continue;\r\n                case '\\r':\r\n                    retval += \"\\\\r\";\r\n                    continue;\r\n                case '\\\"':\r\n                    retval += \"\\\\\\\"\";\r\n                    continue;\r\n                case '\\'':\r\n                    retval += \"\\\\\\'\";\r\n                    continue;\r\n                case '\\\\':\r\n                    retval += \"\\\\\\\\\";\r\n                    continue;\r\n                default:\r\n                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\r\n                        var s = \"0000\" + ch.toString();\r\n                        retval += \"\\\\u\" + s.substring(s.length - 4, s.length);\r\n                    } else {\r\n                        retval += ch;\r\n                    }\r\n                    continue;\r\n            }\r\n        }\r\n        return retval.toString();\r\n    }\r\n}","var logger = require('../logger/logger');\r\n\r\nexport default class RJsonToken {\r\n    constructor(ofkind,nimage) {\r\n        this._kind = ofkind;\r\n        this._image = nimage;\r\n        this._next = null;\r\n        this.specialToken = null;\r\n    }\r\n\r\n    set next(newNext) {\r\n        this._next = newNext;\r\n    }\r\n\r\n    get next() {\r\n        return this._next;\r\n    }\r\n\r\n    set beginLine(line) {\r\n        this._beginLine = line;\r\n    }\r\n\r\n    get beginLine() {\r\n        return this._beginLine;\r\n    }\r\n\r\n    set endLine(line) {\r\n        this._endLine = line;\r\n    }\r\n\r\n    set beginColumn(column) {\r\n        this._beginColumn = column;\r\n    }\r\n\r\n    get beginColumn() {\r\n        return this._beginColumn;\r\n    }\r\n\r\n    set endColumn(column) {\r\n        this._endColumn = column;\r\n    }\r\n\r\n    get kind() {\r\n        return this._kind;\r\n    }\r\n\r\n    set kind(newKind) {\r\n        this._kind = newKind;\r\n    }\r\n\r\n    get image() {\r\n        logger.debug('returning from token image length ->' + this._image.length);\r\n        return this._image;\r\n    }\r\n\r\n    static newToken(kind,image) {\r\n        return new RJsonToken(kind,image);\r\n    }\r\n\r\n    toString() {\r\n     return \"kind=\" + this._kind + \",image=\" + this.image;\r\n    }\r\n}","var logger = require('../logger/logger');\r\n\r\nexport default class RJsonTokenMgrError {\r\n    static addEscapes(str) {\r\n        //logger.debug('addEscapes)' + str);\r\n        let i,ch;\r\n        let retval = \"\";\r\n        for (i = 0; i < str.length; i++) {\r\n            switch (str.charAt(i)) {\r\n                case 0:\r\n                    continue;\r\n                case '\\b':\r\n                    retval += \"\\\\b\";\r\n                    continue;\r\n                case '\\t':\r\n                    retval += \"\\\\t\";\r\n                    continue;\r\n                case '\\n':\r\n                    retval += \"\\\\n\";\r\n                    continue;\r\n                case '\\f':\r\n                    retval += \"\\\\f\";\r\n                    continue;\r\n                case '\\r':\r\n                    retval += \"\\\\r\";\r\n                    continue;\r\n                case '\\\"':\r\n                    retval += \"\\\\\\\"\";\r\n                    continue;\r\n                case '\\'':\r\n                    retval += \"\\\\\\'\";\r\n                    continue;\r\n                case '\\\\':\r\n                    retval += \"\\\\\\\\\";\r\n                    continue;\r\n                default:\r\n                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\r\n                        var s = \"0000\" + ch.toString();\r\n                        retval += \"\\\\u\" + s.substring(s.length - 4, s.length);\r\n                        //logger.debug('retval' + retval);\r\n                    } else {\r\n                        retval += ch;\r\n                    }\r\n                    continue;\r\n            }\r\n        }\r\n        //logger.debug('8888' + retval.toString());\r\n        return retval.toString();\r\n    }\r\n\r\n    static LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar) {\r\n        let code = curChar.charCodeAt();\r\n        //logger.debug('LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar)');\r\n        var res = \"Lexical error at line \" +\r\n            errorLine + \", column \" +\r\n            errorColumn + \".  Encountered: \" +\r\n            (EOFSeen ? \"<EOF> \" : (\"\\\"\" + RJsonTokenMgrError.addEscapes(curChar) + \"\\\"\") + \" (\" + code + \"), \") +\r\n            \"after : \\\"\" + RJsonTokenMgrError.addEscapes(errorAfter) + \"\\\"\";\r\n        //logger.debug(res);\r\n    }\r\n\r\n    constructor(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar, reason) {\r\n        this.message = RJsonTokenMgrError.LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar);\r\n        this.reason = reason;\r\n    }\r\n}"],"sourceRoot":""}