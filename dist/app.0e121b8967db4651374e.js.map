{"version":3,"sources":["webpack://RJsonParser/webpack/universalModuleDefinition","webpack://RJsonParser/./src/app.js","webpack://RJsonParser/./src/io/StringReader.js","webpack://RJsonParser/./src/json/JsonFormat.js","webpack://RJsonParser/./src/json/JsonLexer.js","webpack://RJsonParser/./src/json/JsonParser.js","webpack://RJsonParser/./src/json/JsonToken.js"],"names":["root","factory","exports","module","define","amd","this","e","console","error","document","getElementById","innerHTML","message","parse","StringReader","input","_input","_length","length","_next","_mark","Error","_ensureOpen","JsonFormat","JsonLexer","src","_src","_tokenTypes","openBrace","closeBrace","openBracket","closeBracket","colon","comma","stringValue","integerValue","floatValue","trueValue","falseValue","nullValue","endOfFile","_currentLine","_currentColumn","_tokenWriter","_tokenLine","_tokenColumn","_reader","_nextChar","readChar","_nextToken","readToken","testChar","useChar","isEOF","singleCharToken","keywordToken","startToken","integralPattern","matcher","getMatch","matches","finishToken","integralValue","floatingPattern","floatingValue","createParseException","testControlChar","Token","TokenType","currentLine","currentColumn","log","read","type","res","line","column","token","push","character","_valueOf","keyword","i","charAt","_okenColumn","match","toString","isISOControl","codePoint","JsonParser","lexer","_lexer","string","pos","ch","substring","testToken","tokenTypes","jsonMap","Map","useToken","_createParseExceptionUnexpectedToken","key","parseString","createParseExceptionUnexpectedToken","map","_instance","result","expected","createTokenParseException","runParser","JsonToken","_type","_match","_line","_column","ntype","nmatch","nline","ncolumn"],"mappings":"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","file":"app.0e121b8967db4651374e.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RJsonParser\"] = factory();\n\telse\n\t\troot[\"RJsonParser\"] = factory();\n})(this, function() {\nreturn ","import JsonFormat from \"./json/JsonFormat\"\r\nimport css from \"./css/style.css\";\r\n\r\nparse();\r\n\r\nfunction parse() {\r\n    try {\r\n        let json = new JsonFormat();\r\n        //var res = json.parse('{\"rupak\":\"abcd\"}')\r\n        //console.log(res);\r\n        //document.getElementById('root').innerHTML = res;\r\n    } catch (e) {\r\n        console.error(e);\r\n        document.getElementById('root').innerHTML = e.message;\r\n    }\r\n}\r\n\r\n","export default class StringReader {\r\n\r\n    constructor(input) {\r\n        this._input = input;\r\n        this._length = this._input.length;\r\n        this._next = 0;\r\n        this._mark = 0;\r\n    }\r\n\r\n    _ensureOpen() {\r\n        if(this._input === null)\r\n            throw new Error(\"Stream closed\");\r\n    }\r\n\r\n    /*\r\n     Reads a single character.\r\n\r\n     @return -1, if the end of stream has reached.\r\n    */\r\n    read() {\r\n        this._ensureOpen();\r\n        if (this._next >= this._length)\r\n            return -1;\r\n        return this._input[this._next++];\r\n    }\r\n}","\r\nimport JsonParser from './JsonParser'\r\n\r\nexport default class JsonFormat {\r\n\r\n    parse(input) {\r\n        return JsonParser.runParser(input, null);\r\n    }\r\n}\r\n","import JsonToken from \"./JsonToken\";\r\nimport StringReader from \"../io/StringReader\"\r\n\r\nexport default class JsonLexer {\r\n\r\n    constructor(input, src) {\r\n        this._input = input;\r\n        this._src = src;\r\n        this._tokenTypes = {\r\n            openBrace: '{',\r\n            closeBrace: '}',\r\n            openBracket: '[',\r\n            closeBracket: ']',\r\n            colon: ':',\r\n            comma: ',',\r\n            stringValue: \"\",\r\n            integerValue: 0,\r\n            floatValue: 0.0,\r\n            trueValue: 'true',\r\n            falseValue: 'false',\r\n            nullValue: 'null',\r\n            endOfFile: 'EOF'\r\n        }\r\n        this._currentLine = 1;\r\n        this._currentColumn = 0;\r\n\r\n        this._tokenWriter = [];\r\n\r\n        this._tokenLine = -1;\r\n        this._tokenColumn = -1;\r\n\r\n        this._reader = new StringReader(this._input);\r\n        this._nextChar = this.readChar();\r\n        this._nextToken = this.readToken();\r\n    }\r\n\r\n    get tokenTypes() {\r\n        return this._tokenTypes;\r\n    }\r\n\r\n    readToken() {\r\n        while (true) {\r\n            if (this.testChar(' ') || this.testChar('\\t') || this.testChar('\\n') || this.testChar('\\r')) {\r\n                // Parse white space.\r\n                this.useChar();\r\n            } else if (this.testChar('/')) {\r\n                // Parse comments.\r\n                this.useChar();\r\n\r\n                if (this.testChar('/')) {\r\n                    this.useChar();\r\n\r\n                    while (!(this.testChar('\\n') || this.isEOF())) {\r\n                        this.useChar();\r\n                    }\r\n                } else if (this.testChar('*')) {\r\n                    this.useChar();\r\n\r\n                    while (!this.testChar('*')) {\r\n                        if (this.isEOF()) {\r\n                            throw new Error(\"Invalid comment\");\r\n                        }\r\n\r\n                        this.useChar();\r\n                    }\r\n\r\n                    this.useChar();\r\n\r\n                    while (this.testChar('*')) {\r\n                        this.useChar();\r\n                    }\r\n\r\n                    if (!this.testChar('/')) {\r\n                        throw new Error(\"Invalid comment\");\r\n                    }\r\n\r\n                    this.useChar();\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (this.testChar(',')) {\r\n            return this.singleCharToken(this._tokenTypes.comma);\r\n        } else if (this.testChar(':')) {\r\n            return this.singleCharToken(this._tokenTypes.colon);\r\n        } else if (this.testChar('{')) {\r\n            return this.singleCharToken(this._tokenTypes.openBrace);\r\n        } else if (this.testChar('}')) {\r\n            return this.singleCharToken(this._tokenTypes.closeBrace);\r\n        } else if (this.testChar('[')) {\r\n            return this.singleCharToken(this._tokenTypes.openBracket);\r\n        } else if (this.testChar(']')) {\r\n            return this.singleCharToken(this._tokenTypes.closeBracket);\r\n        } else if (this.testChar('t')) {\r\n            return this.keywordToken(this._tokenTypes.trueValue, \"true\");\r\n        } else if (this.testChar('f')) {\r\n            return this.keywordToken(this._tokenTypes.falseValue, \"false\");\r\n        } else if (this.testChar('n')) {\r\n            return this.keywordToken(this._tokenTypes.nullValue, \"null\");\r\n        } else if (this.testChar('0', '9') || this.testChar('-')) {\r\n            this.startToken();\r\n            this.useChar();\r\n\r\n            while (this.testChar('0', '9') || this.testChar('.') || this.testChar('e') || this.testChar('E') || this.testChar('-') || this.testChar('+')) {\r\n                this.useChar();\r\n            }\r\n\r\n            // Cannot use the patters to find the match directly because we are reading from a Reader and not a CharSequence.\r\n            if (integralPattern.matcher(getMatch()).matches()) {\r\n                return this.finishToken(this._tokenTypes.integralValue);\r\n            } else if (floatingPattern.matcher(getMatch()).matches()) {\r\n                return this.finishToken(this._tokenTypes.floatingValue);\r\n            } else {\r\n                throw createParseException(\"Invalid number\");\r\n            }\r\n        } else if (this.testChar('\\\"')) {\r\n            // \"((?:[^\\\\\"]|\\\\.)*)\"\r\n            this.startToken();\r\n            this.useChar();\r\n\r\n            while (!this.testChar('\\\"')) {\r\n                if (this.isEOF()) {\r\n                    var message = \"EOF inside string\";\r\n                    throw createParseException(message);\r\n                }\r\n\r\n                if (this.testControlChar()) {\r\n                    throw createParseException(\"Invalid control character\");\r\n                }\r\n\r\n                if (this.testChar('\\\\')) {\r\n                    this.useChar();\r\n                }\r\n\r\n                this.useChar();\r\n            }\r\n\r\n            this.useChar();\r\n\r\n            return this.finishToken(this._tokenTypes.stringValue);\r\n        } else if (this.isEOF()) {\r\n            return new Token(TokenType.endOfFile, \"\", currentLine, currentColumn); // meaning there are no more tokens\r\n        } else if (this.testControlChar()) {\r\n            throw this.createParseException(\"Invalid control character\");\r\n        } else {\r\n            console.log('invalid token....');\r\n            throw this.createParseException(this._currentLine,this._currentColumn,\"Invalid Token @Line \" + this._currentLine + \", @column \" + this._currentColumn);\r\n        }\r\n    }\r\n\r\n    readChar() {\r\n        return this._reader.read();\r\n    }\r\n\r\n    testToken(type) {\r\n        var res = this._nextToken.type === type;\r\n        console.log('_nextToken-' + this._nextToken.type + ', input->' + type + ',res-' + res);\r\n        console.log('_nextToken.line-' + this._nextToken.line + ', _nextToken.column->' + this._nextToken.column );\r\n        return this._nextToken.type === type;\r\n    }\r\n\r\n    createParseException(message) {\r\n        console.log(message);\r\n        return new Error('1234');\r\n    }\r\n\r\n    createTokenParseException(token, message) {\r\n        return this.createParseException(token.line, token.column, message);\r\n    }\r\n\r\n    createParseException(line, column, message) {\r\n        var instance = new Error(message, line, column);\r\n        return instance;\r\n    }\r\n\r\n    useToken() {\r\n        let res = this._nextToken;\r\n        this._nextToken = this.readToken();\r\n        return res;\r\n    }\r\n\r\n    useChar() {\r\n        if (this._nextChar === -1)\r\n            throw new Error('assertion failed.');\r\n\r\n        var res = this._nextChar;\r\n\r\n        if (this._nextChar === '\\n') {\r\n            this._currentLine += 1;\r\n            this._currentColumn = 0;\r\n        } else {\r\n            this._currentColumn += 1;\r\n        }\r\n\r\n        if (this._tokenWriter != null) {\r\n            this._tokenWriter.push(res);\r\n        }\r\n\r\n        this._nextChar = this.readChar();\r\n\r\n        return res;\r\n    }\r\n\r\n    testChar(character) {\r\n        return this._nextChar === character;\r\n    }\r\n\r\n    singleCharToken(type) {\r\n        var line = this._currentLine;\r\n        var column = this._currentColumn;\r\n\r\n        return new JsonToken(type, this._valueOf(this.useChar()), line, column);\r\n    }\r\n\r\n    _keywordToken(type, keyword) {\r\n        var length = keyword.length();\r\n\r\n        // we skip testing the first character as we wouldn't be here it it didn't match\r\n        useChar();\r\n\r\n        for (var i = 1; i < length; i += 1) {\r\n            if (!this.testChar(keyword.charAt(i))) {\r\n                throw createParseException(currentLine, currentColumn - i, \"Invalid token\"); // i hope we're safe with `currentColumn - i', multi-line keywords aren't that common ;-)\r\n            }\r\n\r\n            this.useChar();\r\n        }\r\n\r\n        return new JsonToken(type, keyword, currentLine, currentColumn - length);\r\n    }\r\n\r\n    _valueOf(input) {\r\n        return (input == null) ? \"null\" : '\\\"' + input + '\\\"';\r\n    }\r\n\r\n    startToken() {\r\n        this._tokenWriter = [];\r\n        this._tokenLine = this._currentLine;\r\n        this._okenColumn = this._currentColumn;\r\n    }\r\n\r\n    finishToken(type) {\r\n        let match = this.getMatch();\r\n\r\n        this._tokenWriter = null;\r\n\r\n        return new JsonToken(type, match, this._tokenLine, this._tokenColumn);\r\n    }\r\n\r\n    getMatch() {\r\n        return this._tokenWriter.toString();\r\n    }\r\n\r\n    isEOF() {\r\n\t\treturn this._nextChar === -1;\r\n\t}\r\n\r\n    testControlChar() {\r\n\t\treturn this.isISOControl(this._nextChar);\r\n\t}\r\n\r\n    /**\r\n     * Determines if the referenced character (Unicode code point) is an ISO control\r\n     * character.  A character is considered to be an ISO control\r\n     * character if its code is in the range {@code '\\u005Cu0000'}\r\n     * through {@code '\\u005Cu001F'} or in the range\r\n     * {@code '\\u005Cu007F'} through {@code '\\u005Cu009F'}.\r\n     *\r\n     * @param   codePoint the character (Unicode code point) to be tested.\r\n     * @return  {@code true} if the character is an ISO control character;\r\n     *          {@code false} otherwise.\r\n     * @see     Character#isSpaceChar(int)\r\n     * @see     Character#isWhitespace(int)\r\n     * @since   1.5\r\n     */\r\n     isISOControl( codePoint) {\r\n        // Optimized form of:\r\n        //     (codePoint >= 0x00 && codePoint <= 0x1F) ||\r\n        //     (codePoint >= 0x7F && codePoint <= 0x9F);\r\n        return codePoint <= 0x9F &&\r\n            (codePoint >= 0x7F || (codePoint >>> 5 == 0));\r\n    }\r\n}\r\n","import JsonLexer from \"./JsonLexer\";\r\n\r\nexport default class JsonParser {\r\n\r\n    constructor(lexer) {\r\n        this._lexer = lexer;\r\n    }\r\n\r\n    parseString(token) {\r\n        var res = [];\r\n        var string = token.match;\r\n        var pos = 1; // skip leading \"\r\n        var length = string.length - 1; // skip trailing \"\r\n        while (pos < length) {\r\n            if (string[pos] === '\\\\') {\r\n                let ch = string[pos + 1];\r\n                pos += 2;\r\n                if (ch === '\"') {\r\n                    res.push('\"');\r\n                } else if (ch === '\\\\') {\r\n                    res.push('\\\\');\r\n                } else if (ch === '/') {\r\n                    res.push('/');\r\n                } else if (ch === 'b') {\r\n                    res.push('\\b');\r\n                } else if (ch === 'f') {\r\n                    res.push('\\f');\r\n                } else if (ch === 'n') {\r\n                    res.push('\\n');\r\n                } else if (ch === 'r') {\r\n                    res.push('\\r');\r\n                } else if (ch === 't') {\r\n                    res.push('\\t');\r\n                } else if (ch === 'u') {\r\n                    res.push(string.substring(pos, pos + 4), 16);\r\n                    pos += 4;\r\n                } else {\r\n                    throw this._lexer.createParseException(token.line, token.column + pos - 2, \"Illegal string escape sequence\");\r\n                }\r\n            } else {\r\n                res.push(string[pos]);\r\n                pos += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    parse() {\r\n        if (this._lexer.testToken(this._lexer.tokenTypes.openBrace)) {\r\n            let jsonMap = new Map();\r\n\r\n            this._lexer.useToken(); // {\r\n            if (!this._lexer.testToken(this._lexer.tokenTypes.closeBrace)) {\r\n                while (true) {\r\n                    if (!this._lexer.testToken(this._lexer.tokenTypes.stringValue)) {\r\n                        throw this._createParseExceptionUnexpectedToken(\"string\");\r\n                    }\r\n                    var key = this.parseString(this._lexer.useToken());\r\n                    if (!this._lexer.testToken(this._lexer.tokenTypes.colon)) {\r\n                        throw createParseExceptionUnexpectedToken(\"colon\");\r\n                    }\r\n                    this._lexer.useToken(); // :\r\n                    console.log('key-' + key);\r\n                    jsonMap[key] = this.parse();\r\n\r\n                    if (this._lexer.testToken(this._lexer.tokenTypes.comma)) {\r\n                        this._lexer.useToken(); // ,\r\n                    } else if (this._lexer.testToken(this._lexer.tokenTypes.closeBrace)) {\r\n                        break;\r\n                    } else {\r\n                        throw createParseExceptionUnexpectedToken(\"comma or closing brace\");\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            lexer.useToken(); // }\r\n            return map;\r\n        }\r\n        return ' after processing';\r\n    }\r\n\r\n    static runParser(input, src) {\r\n        this._input = input;\r\n        this._src = src;\r\n        this._lexer = new JsonLexer(this._input, this._src);\r\n        this._instance = new JsonParser(this._lexer);\r\n        var result = this._instance.parse();\r\n\r\n        if (!this._lexer.testToken(this._lexer.tokenTypes.endOfFile)) {\r\n            throw this._createParseExceptionUnexpectedToken(\"end of file\");\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static _createParseExceptionUnexpectedToken(expected) {\r\n        return this._lexer.createTokenParseException(this._lexer.useToken(), \"Expected \" + expected);\r\n    }\r\n}\r\n\r\nexport function runParser(input) {\r\n    JsonParser.runParser(input);\r\n}","export default class JsonToken {\r\n    constructor(type, match, line, column) {\r\n        this._type = type;\r\n        this._match = match;\r\n        this._line = line;\r\n        this._column = column;\r\n    }\r\n\r\n    get type() { return this._type }\r\n    set type(ntype) { this._type = ntype; }\r\n\r\n    get match() { return this._match; }\r\n    set match(nmatch) { this._match = nmatch; }\r\n\r\n    get line() { return this._line; }\r\n    set line(nline) { this._line = nline; }\r\n\r\n    get column() { return this._column; }\r\n    set column(ncolumn) { this._column = ncolumn; }\r\n}"],"sourceRoot":""}